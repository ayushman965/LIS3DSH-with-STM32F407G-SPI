
STM32F407G_Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004054  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080041e4  080041e4  000051e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004324  08004324  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004324  08004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800432c  0800432c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800432c  0800432c  0000532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004330  08004330  00005330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004334  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000210  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a66c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a75  00000000  00000000  00010704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  00012180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006fe  00000000  00000000  00012aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218b9  00000000  00000000  000131a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b60b  00000000  00000000  00034a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e9a  00000000  00000000  0004006a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106f04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cac  00000000  00000000  00106f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00109bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041cc 	.word	0x080041cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080041cc 	.word	0x080041cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fc29 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f83f 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f907 	bl	8000780 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000572:	f000 f8a5 	bl	80006c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000576:	f000 f8d9 	bl	800072c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	setvbuf(stdout, NULL, _IONBF, 0);
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <main+0x80>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6898      	ldr	r0, [r3, #8]
 8000580:	2300      	movs	r3, #0
 8000582:	2202      	movs	r2, #2
 8000584:	2100      	movs	r1, #0
 8000586:	f002 ff09 	bl	800339c <setvbuf>

	HAL_Delay(200);
 800058a:	20c8      	movs	r0, #200	@ 0xc8
 800058c:	f000 fc88 	bl	8000ea0 <HAL_Delay>

	uint8_t Read_Data = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	71fb      	strb	r3, [r7, #7]
	int16_t buffer[3] = { 0 };
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	809a      	strh	r2, [r3, #4]

	Check_ID();
 800059c:	f002 fbf6 	bl	8002d8c <Check_ID>

	LIS3DSH_Init();
 80005a0:	f002 fc34 	bl	8002e0c <LIS3DSH_Init>

	readRegister(&Read_Data, CTRL_REG4);
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	2120      	movs	r1, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 faf3 	bl	8002b94 <readRegister>
	printf("\nCTRL_REG4: 0x%X", Read_Data);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4619      	mov	r1, r3
 80005b2:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <main+0x84>)
 80005b4:	f002 fee0 	bl	8003378 <iprintf>

	readRegister(&Read_Data, CTRL_REG5);
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	2124      	movs	r1, #36	@ 0x24
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fae9 	bl	8002b94 <readRegister>
	printf("\nCTRL_REG5: 0x%X", Read_Data);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4808      	ldr	r0, [pc, #32]	@ (80005e8 <main+0x88>)
 80005c8:	f002 fed6 	bl	8003378 <iprintf>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		LIS3DSH_ReadACC(buffer);
 80005cc:	463b      	mov	r3, r7
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fc3c 	bl	8002e4c <LIS3DSH_ReadACC>

		DropLed(buffer);
 80005d4:	463b      	mov	r3, r7
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fd14 	bl	8003004 <DropLed>
		LIS3DSH_ReadACC(buffer);
 80005dc:	bf00      	nop
 80005de:	e7f5      	b.n	80005cc <main+0x6c>
 80005e0:	20000018 	.word	0x20000018
 80005e4:	080041e4 	.word	0x080041e4
 80005e8:	080041f8 	.word	0x080041f8

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 ffc5 	bl	800358a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	@ (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	@ (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fed4 	bl	8001420 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067e:	f000 f9e3 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 f935 	bl	8001910 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ac:	f000 f9cc 	bl	8000a48 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <MX_SPI1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006f4:	2218      	movs	r2, #24
 80006f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_SPI1_Init+0x64>)
 800070c:	220a      	movs	r2, #10
 800070e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000712:	f001 fb1d 	bl	8001d50 <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 f994 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000084 	.word	0x20000084
 8000728:	40013000 	.word	0x40013000

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f001 fe0a 	bl	800237c <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f96b 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000dc 	.word	0x200000dc
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	@ 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	4b9a      	ldr	r3, [pc, #616]	@ (8000a04 <MX_GPIO_Init+0x284>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a99      	ldr	r2, [pc, #612]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b97      	ldr	r3, [pc, #604]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	4b93      	ldr	r3, [pc, #588]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a92      	ldr	r2, [pc, #584]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b90      	ldr	r3, [pc, #576]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b8c      	ldr	r3, [pc, #560]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a8b      	ldr	r2, [pc, #556]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b89      	ldr	r3, [pc, #548]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b85      	ldr	r3, [pc, #532]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a84      	ldr	r2, [pc, #528]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b82      	ldr	r3, [pc, #520]	@ (8000a04 <MX_GPIO_Init+0x284>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a04 <MX_GPIO_Init+0x284>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a04 <MX_GPIO_Init+0x284>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b7b      	ldr	r3, [pc, #492]	@ (8000a04 <MX_GPIO_Init+0x284>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b77      	ldr	r3, [pc, #476]	@ (8000a04 <MX_GPIO_Init+0x284>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a76      	ldr	r2, [pc, #472]	@ (8000a04 <MX_GPIO_Init+0x284>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b74      	ldr	r3, [pc, #464]	@ (8000a04 <MX_GPIO_Init+0x284>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4871      	ldr	r0, [pc, #452]	@ (8000a08 <MX_GPIO_Init+0x288>)
 8000844:	f000 fdd2 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2101      	movs	r1, #1
 800084c:	486f      	ldr	r0, [pc, #444]	@ (8000a0c <MX_GPIO_Init+0x28c>)
 800084e:	f000 fdcd 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000852:	2200      	movs	r2, #0
 8000854:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000858:	486d      	ldr	r0, [pc, #436]	@ (8000a10 <MX_GPIO_Init+0x290>)
 800085a:	f000 fdc7 	bl	80013ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4864      	ldr	r0, [pc, #400]	@ (8000a08 <MX_GPIO_Init+0x288>)
 8000876:	f000 fc1d 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	485e      	ldr	r0, [pc, #376]	@ (8000a0c <MX_GPIO_Init+0x28c>)
 8000892:	f000 fc0f 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4856      	ldr	r0, [pc, #344]	@ (8000a0c <MX_GPIO_Init+0x28c>)
 80008b2:	f000 fbff 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4852      	ldr	r0, [pc, #328]	@ (8000a14 <MX_GPIO_Init+0x294>)
 80008cc:	f000 fbf2 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d0:	2310      	movs	r3, #16
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	484a      	ldr	r0, [pc, #296]	@ (8000a14 <MX_GPIO_Init+0x294>)
 80008ec:	f000 fbe2 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008f0:	2304      	movs	r3, #4
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4845      	ldr	r0, [pc, #276]	@ (8000a18 <MX_GPIO_Init+0x298>)
 8000904:	f000 fbd6 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091a:	2305      	movs	r3, #5
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	483c      	ldr	r0, [pc, #240]	@ (8000a18 <MX_GPIO_Init+0x298>)
 8000926:	f000 fbc5 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800092a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800092e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4833      	ldr	r0, [pc, #204]	@ (8000a10 <MX_GPIO_Init+0x290>)
 8000944:	f000 fbb6 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000948:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800095a:	2306      	movs	r3, #6
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4829      	ldr	r0, [pc, #164]	@ (8000a0c <MX_GPIO_Init+0x28c>)
 8000966:	f000 fba5 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800096a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4825      	ldr	r0, [pc, #148]	@ (8000a14 <MX_GPIO_Init+0x294>)
 8000980:	f000 fb98 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000984:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000996:	230a      	movs	r3, #10
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <MX_GPIO_Init+0x294>)
 80009a2:	f000 fb87 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a6:	2320      	movs	r3, #32
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4815      	ldr	r0, [pc, #84]	@ (8000a10 <MX_GPIO_Init+0x290>)
 80009ba:	f000 fb7b 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009be:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	480f      	ldr	r0, [pc, #60]	@ (8000a18 <MX_GPIO_Init+0x298>)
 80009dc:	f000 fb6a 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_GPIO_Init+0x288>)
 80009f6:	f000 fb5d 	bl	80010b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	@ 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	// You can ignore 'file' as we're just using UART
	(void) file;

	// Transmit the entire buffer over UART
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <_write+0x28>)
 8000a34:	f001 fcf2 	bl	800241c <HAL_UART_Transmit>

	// Return the number of transmitted bytes
	return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000dc 	.word	0x200000dc

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("\nError Handler Called!:((");
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <Error_Handler+0x18>)
 8000a4e:	f002 fc93 	bl	8003378 <iprintf>
	printf("\nPlease reset the device!");
 8000a52:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <Error_Handler+0x1c>)
 8000a54:	f002 fc90 	bl	8003378 <iprintf>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
	__disable_irq();
	while (1) {
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x14>
 8000a60:	0800420c 	.word	0x0800420c
 8000a64:	08004228 	.word	0x08004228

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa6:	2007      	movs	r0, #7
 8000aa8:	f000 fad0 	bl	800104c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <HAL_SPI_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12b      	bne.n	8000b32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_SPI_MspInit+0x88>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <HAL_SPI_MspInit+0x88>)
 8000ae4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_SPI_MspInit+0x88>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_SPI_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <HAL_SPI_MspInit+0x88>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_SPI_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b12:	23e0      	movs	r3, #224	@ 0xe0
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b22:	2305      	movs	r3, #5
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <HAL_SPI_MspInit+0x8c>)
 8000b2e:	f000 fac1 	bl	80010b4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40013000 	.word	0x40013000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	@ (8000bcc <HAL_UART_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a17      	ldr	r2, [pc, #92]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000bbe:	f000 fa79 	bl	80010b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	@ 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2e:	f000 f917 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e00a      	b.n	8000c5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c48:	f3af 8000 	nop.w
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	b2ca      	uxtb	r2, r1
 8000c56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dbf0      	blt.n	8000c48 <_read+0x12>
  }

  return len;
 8000c66:	687b      	ldr	r3, [r7, #4]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c98:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_isatty>:

int _isatty(int file)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f002 fc8e 	bl	8003628 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20020000 	.word	0x20020000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000124 	.word	0x20000124
 8000d40:	20000278 	.word	0x20000278

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d6c:	f7ff ffea 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d96:	f002 fc4d 	bl	8003634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fbe1 	bl	8000560 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dac:	08004334 	.word	0x08004334
  ldr r2, =_sbss
 8000db0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000db4:	20000278 	.word	0x20000278

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f931 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fe3a 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f93b 	bl	800109a <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f911 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000128 	.word	0x20000128

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000128 	.word	0x20000128

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ffee 	bl	8000e88 <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_Delay+0x44>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffde 	bl	8000e88 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	@ (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	@ (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff47 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff5c 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffb0 	bl	8001008 <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e16b      	b.n	80013a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 815a 	bne.w	80013a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d005      	beq.n	8001106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	2b02      	cmp	r3, #2
 8001104:	d130      	bne.n	8001168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 0201 	and.w	r2, r3, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b03      	cmp	r3, #3
 8001172:	d017      	beq.n	80011a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80b4 	beq.w	80013a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b60      	ldr	r3, [pc, #384]	@ (80013c0 <HAL_GPIO_Init+0x30c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a5f      	ldr	r2, [pc, #380]	@ (80013c0 <HAL_GPIO_Init+0x30c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b5d      	ldr	r3, [pc, #372]	@ (80013c0 <HAL_GPIO_Init+0x30c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001256:	4a5b      	ldr	r2, [pc, #364]	@ (80013c4 <HAL_GPIO_Init+0x310>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a52      	ldr	r2, [pc, #328]	@ (80013c8 <HAL_GPIO_Init+0x314>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d02b      	beq.n	80012da <HAL_GPIO_Init+0x226>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a51      	ldr	r2, [pc, #324]	@ (80013cc <HAL_GPIO_Init+0x318>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d025      	beq.n	80012d6 <HAL_GPIO_Init+0x222>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a50      	ldr	r2, [pc, #320]	@ (80013d0 <HAL_GPIO_Init+0x31c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01f      	beq.n	80012d2 <HAL_GPIO_Init+0x21e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4f      	ldr	r2, [pc, #316]	@ (80013d4 <HAL_GPIO_Init+0x320>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x21a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4e      	ldr	r2, [pc, #312]	@ (80013d8 <HAL_GPIO_Init+0x324>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x216>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4d      	ldr	r2, [pc, #308]	@ (80013dc <HAL_GPIO_Init+0x328>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x212>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4c      	ldr	r2, [pc, #304]	@ (80013e0 <HAL_GPIO_Init+0x32c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x20e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	@ (80013e4 <HAL_GPIO_Init+0x330>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x20a>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e00e      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012be:	2308      	movs	r3, #8
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	@ (80013c4 <HAL_GPIO_Init+0x310>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a32      	ldr	r2, [pc, #200]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a27      	ldr	r2, [pc, #156]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001372:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139c:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <HAL_GPIO_Init+0x334>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae90 	bls.w	80010d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40021400 	.word	0x40021400
 80013e0:	40021800 	.word	0x40021800
 80013e4:	40021c00 	.word	0x40021c00
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e267      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d075      	beq.n	800152a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143e:	4b88      	ldr	r3, [pc, #544]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b04      	cmp	r3, #4
 8001448:	d00c      	beq.n	8001464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4b85      	ldr	r3, [pc, #532]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d112      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b82      	ldr	r3, [pc, #520]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800145e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	4b7e      	ldr	r3, [pc, #504]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d05b      	beq.n	8001528 <HAL_RCC_OscConfig+0x108>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d157      	bne.n	8001528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e242      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001484:	d106      	bne.n	8001494 <HAL_RCC_OscConfig+0x74>
 8001486:	4b76      	ldr	r3, [pc, #472]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a75      	ldr	r2, [pc, #468]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x98>
 800149e:	4b70      	ldr	r3, [pc, #448]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6f      	ldr	r2, [pc, #444]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6c      	ldr	r2, [pc, #432]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 80014b8:	4b69      	ldr	r3, [pc, #420]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a68      	ldr	r2, [pc, #416]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b66      	ldr	r3, [pc, #408]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a65      	ldr	r2, [pc, #404]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcd6 	bl	8000e88 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcd2 	bl	8000e88 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e207      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xc0>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fcc2 	bl	8000e88 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fcbe 	bl	8000e88 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1f3      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0xe8>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001536:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b44      	ldr	r3, [pc, #272]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b41      	ldr	r3, [pc, #260]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x152>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1c7      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4937      	ldr	r1, [pc, #220]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b34      	ldr	r3, [pc, #208]	@ (8001664 <HAL_RCC_OscConfig+0x244>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fc77 	bl	8000e88 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fc73 	bl	8000e88 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1a8      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4925      	ldr	r1, [pc, #148]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <HAL_RCC_OscConfig+0x244>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc56 	bl	8000e88 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc52 	bl	8000e88 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e187      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d036      	beq.n	8001678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d016      	beq.n	8001640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_RCC_OscConfig+0x248>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fc36 	bl	8000e88 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fc32 	bl	8000e88 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e167      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_RCC_OscConfig+0x240>)
 8001634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x200>
 800163e:	e01b      	b.n	8001678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <HAL_RCC_OscConfig+0x248>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fc1f 	bl	8000e88 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	e00e      	b.n	800166c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fc1b 	bl	8000e88 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d907      	bls.n	800166c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e150      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
 8001660:	40023800 	.word	0x40023800
 8001664:	42470000 	.word	0x42470000
 8001668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b88      	ldr	r3, [pc, #544]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 800166e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ea      	bne.n	800164e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8097 	beq.w	80017b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b81      	ldr	r3, [pc, #516]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b7d      	ldr	r3, [pc, #500]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	4a7c      	ldr	r2, [pc, #496]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b77      	ldr	r3, [pc, #476]	@ (8001894 <HAL_RCC_OscConfig+0x474>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b74      	ldr	r3, [pc, #464]	@ (8001894 <HAL_RCC_OscConfig+0x474>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a73      	ldr	r2, [pc, #460]	@ (8001894 <HAL_RCC_OscConfig+0x474>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fbdb 	bl	8000e88 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff fbd7 	bl	8000e88 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e10c      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001894 <HAL_RCC_OscConfig+0x474>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x2ea>
 80016fc:	4b64      	ldr	r3, [pc, #400]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001700:	4a63      	ldr	r2, [pc, #396]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	@ 0x70
 8001708:	e01c      	b.n	8001744 <HAL_RCC_OscConfig+0x324>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x30c>
 8001712:	4b5f      	ldr	r3, [pc, #380]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001716:	4a5e      	ldr	r2, [pc, #376]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6713      	str	r3, [r2, #112]	@ 0x70
 800171e:	4b5c      	ldr	r3, [pc, #368]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001722:	4a5b      	ldr	r2, [pc, #364]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6713      	str	r3, [r2, #112]	@ 0x70
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x324>
 800172c:	4b58      	ldr	r3, [pc, #352]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001730:	4a57      	ldr	r2, [pc, #348]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	@ 0x70
 8001738:	4b55      	ldr	r3, [pc, #340]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173c:	4a54      	ldr	r2, [pc, #336]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d015      	beq.n	8001778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174c:	f7ff fb9c 	bl	8000e88 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	e00a      	b.n	800176a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fb98 	bl	8000e88 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0cb      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176a:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ee      	beq.n	8001754 <HAL_RCC_OscConfig+0x334>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff fb86 	bl	8000e88 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fb82 	bl	8000e88 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e0b5      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001796:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ee      	bne.n	8001780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a8:	4b39      	ldr	r3, [pc, #228]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	4a38      	ldr	r2, [pc, #224]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 80017ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a1 	beq.w	8001900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017be:	4b34      	ldr	r3, [pc, #208]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d05c      	beq.n	8001884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d141      	bne.n	8001856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb56 	bl	8000e88 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fb52 	bl	8000e88 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e087      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3b01      	subs	r3, #1
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	491b      	ldr	r1, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x478>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fb2b 	bl	8000e88 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff fb27 	bl	8000e88 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e05c      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x416>
 8001854:	e054      	b.n	8001900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_RCC_OscConfig+0x478>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fb14 	bl	8000e88 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fb10 	bl	8000e88 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e045      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_RCC_OscConfig+0x470>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x444>
 8001882:	e03d      	b.n	8001900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e038      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000
 8001898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800189c:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_RCC_OscConfig+0x4ec>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d028      	beq.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d121      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d11a      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	3b01      	subs	r3, #1
 80018e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0cc      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b68      	ldr	r3, [pc, #416]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d90c      	bls.n	800194c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b65      	ldr	r3, [pc, #404]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a58      	ldr	r2, [pc, #352]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800196e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a52      	ldr	r2, [pc, #328]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d044      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d119      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b3f      	ldr	r3, [pc, #252]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b3b      	ldr	r3, [pc, #236]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e067      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b37      	ldr	r3, [pc, #220]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4934      	ldr	r1, [pc, #208]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fa42 	bl	8000e88 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff fa3e 	bl	8000e88 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e04f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d20c      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f821 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	490a      	ldr	r1, [pc, #40]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f9a2 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080042d8 	.word	0x080042d8
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae0:	b094      	sub	sp, #80	@ 0x50
 8001ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ae8:	2300      	movs	r3, #0
 8001aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aec:	2300      	movs	r3, #0
 8001aee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af4:	4b79      	ldr	r3, [pc, #484]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d00d      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x40>
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	f200 80e1 	bhi.w	8001cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0e:	e0db      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b73      	ldr	r3, [pc, #460]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b14:	e0db      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b16:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b1a:	e0d8      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b24:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b26:	4b6d      	ldr	r3, [pc, #436]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d063      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b6a      	ldr	r3, [pc, #424]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b46:	2300      	movs	r3, #0
 8001b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b4e:	4622      	mov	r2, r4
 8001b50:	462b      	mov	r3, r5
 8001b52:	f04f 0000 	mov.w	r0, #0
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	0159      	lsls	r1, r3, #5
 8001b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b60:	0150      	lsls	r0, r2, #5
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4621      	mov	r1, r4
 8001b68:	1a51      	subs	r1, r2, r1
 8001b6a:	6139      	str	r1, [r7, #16]
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b80:	4659      	mov	r1, fp
 8001b82:	018b      	lsls	r3, r1, #6
 8001b84:	4651      	mov	r1, sl
 8001b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	018a      	lsls	r2, r1, #6
 8001b8e:	4651      	mov	r1, sl
 8001b90:	ebb2 0801 	subs.w	r8, r2, r1
 8001b94:	4659      	mov	r1, fp
 8001b96:	eb63 0901 	sbc.w	r9, r3, r1
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bae:	4690      	mov	r8, r2
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	eb18 0303 	adds.w	r3, r8, r3
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	462b      	mov	r3, r5
 8001bbc:	eb49 0303 	adc.w	r3, r9, r3
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	024b      	lsls	r3, r1, #9
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd8:	4621      	mov	r1, r4
 8001bda:	024a      	lsls	r2, r1, #9
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001be2:	2200      	movs	r2, #0
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bec:	f7fe fb40 	bl	8000270 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bf8:	e058      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfa:	4b38      	ldr	r3, [pc, #224]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	099b      	lsrs	r3, r3, #6
 8001c00:	2200      	movs	r2, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	4611      	mov	r1, r2
 8001c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c14:	4642      	mov	r2, r8
 8001c16:	464b      	mov	r3, r9
 8001c18:	f04f 0000 	mov.w	r0, #0
 8001c1c:	f04f 0100 	mov.w	r1, #0
 8001c20:	0159      	lsls	r1, r3, #5
 8001c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c26:	0150      	lsls	r0, r2, #5
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c32:	4649      	mov	r1, r9
 8001c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c50:	eb63 050b 	sbc.w	r5, r3, fp
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	00eb      	lsls	r3, r5, #3
 8001c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c62:	00e2      	lsls	r2, r4, #3
 8001c64:	4614      	mov	r4, r2
 8001c66:	461d      	mov	r5, r3
 8001c68:	4643      	mov	r3, r8
 8001c6a:	18e3      	adds	r3, r4, r3
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	464b      	mov	r3, r9
 8001c70:	eb45 0303 	adc.w	r3, r5, r3
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c82:	4629      	mov	r1, r5
 8001c84:	028b      	lsls	r3, r1, #10
 8001c86:	4621      	mov	r1, r4
 8001c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	028a      	lsls	r2, r1, #10
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c96:	2200      	movs	r2, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	61fa      	str	r2, [r7, #28]
 8001c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca0:	f7fe fae6 	bl	8000270 <__aeabi_uldivmod>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001cbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cc6:	e002      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3750      	adds	r7, #80	@ 0x50
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	00f42400 	.word	0x00f42400
 8001ce4:	007a1200 	.word	0x007a1200

08001ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d04:	f7ff fff0 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0a9b      	lsrs	r3, r3, #10
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	@ (8001d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	080042e8 	.word	0x080042e8

08001d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d2c:	f7ff ffdc 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0b5b      	lsrs	r3, r3, #13
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	@ (8001d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	080042e8 	.word	0x080042e8

08001d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e07b      	b.n	8001e5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d108      	bne.n	8001d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d72:	d009      	beq.n	8001d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
 8001d7a:	e005      	b.n	8001d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fe88 	bl	8000ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0c:	ea42 0103 	orr.w	r1, r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	0c1b      	lsrs	r3, r3, #16
 8001e26:	f003 0104 	and.w	r1, r3, #4
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	f003 0210 	and.w	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08c      	sub	sp, #48	@ 0x30
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e70:	2301      	movs	r3, #1
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_SPI_TransmitReceive+0x26>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e198      	b.n	80021ba <HAL_SPI_TransmitReceive+0x358>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e90:	f7fe fffa 	bl	8000e88 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d00f      	beq.n	8001ed2 <HAL_SPI_TransmitReceive+0x70>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eb8:	d107      	bne.n	8001eca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_SPI_TransmitReceive+0x68>
 8001ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d003      	beq.n	8001ed2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001ed0:	e16d      	b.n	80021ae <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_SPI_TransmitReceive+0x82>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_SPI_TransmitReceive+0x82>
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001eea:	e160      	b.n	80021ae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d003      	beq.n	8001f00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2205      	movs	r2, #5
 8001efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f40:	2b40      	cmp	r3, #64	@ 0x40
 8001f42:	d007      	beq.n	8001f54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f5c:	d17c      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0x10a>
 8001f66:	8b7b      	ldrh	r3, [r7, #26]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d16a      	bne.n	8002042 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	1c9a      	adds	r2, r3, #2
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f90:	e057      	b.n	8002042 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_SPI_TransmitReceive+0x176>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_SPI_TransmitReceive+0x176>
 8001faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d113      	bne.n	8001fd8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb4:	881a      	ldrh	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	1c9a      	adds	r2, r3, #2
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d119      	bne.n	800201a <HAL_SPI_TransmitReceive+0x1b8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d014      	beq.n	800201a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002002:	1c9a      	adds	r2, r3, #2
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002016:	2301      	movs	r3, #1
 8002018:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800201a:	f7fe ff35 	bl	8000e88 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002026:	429a      	cmp	r2, r3
 8002028:	d80b      	bhi.n	8002042 <HAL_SPI_TransmitReceive+0x1e0>
 800202a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d007      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002040:	e0b5      	b.n	80021ae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1a2      	bne.n	8001f92 <HAL_SPI_TransmitReceive+0x130>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d19d      	bne.n	8001f92 <HAL_SPI_TransmitReceive+0x130>
 8002056:	e080      	b.n	800215a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_SPI_TransmitReceive+0x204>
 8002060:	8b7b      	ldrh	r3, [r7, #26]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d16f      	bne.n	8002146 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800208c:	e05b      	b.n	8002146 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d11c      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x274>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d017      	beq.n	80020d6 <HAL_SPI_TransmitReceive+0x274>
 80020a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d114      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	330c      	adds	r3, #12
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d119      	bne.n	8002118 <HAL_SPI_TransmitReceive+0x2b6>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d014      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002114:	2301      	movs	r3, #1
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002118:	f7fe feb6 	bl	8000e88 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002124:	429a      	cmp	r2, r3
 8002126:	d803      	bhi.n	8002130 <HAL_SPI_TransmitReceive+0x2ce>
 8002128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d102      	bne.n	8002136 <HAL_SPI_TransmitReceive+0x2d4>
 8002130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002144:	e033      	b.n	80021ae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d19e      	bne.n	800208e <HAL_SPI_TransmitReceive+0x22c>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d199      	bne.n	800208e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800215a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800215c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f8b8 	bl	80022d4 <SPI_EndRxTxTransaction>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002176:	e01a      	b.n	80021ae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021a4:	e003      	b.n	80021ae <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80021b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3730      	adds	r7, #48	@ 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021d4:	f7fe fe58 	bl	8000e88 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021e4:	f7fe fe50 	bl	8000e88 <HAL_GetTick>
 80021e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021ea:	4b39      	ldr	r3, [pc, #228]	@ (80022d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	015b      	lsls	r3, r3, #5
 80021f0:	0d1b      	lsrs	r3, r3, #20
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021fa:	e054      	b.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002202:	d050      	beq.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002204:	f7fe fe40 	bl	8000e88 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	429a      	cmp	r2, r3
 8002212:	d902      	bls.n	800221a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d13d      	bne.n	8002296 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002228:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002232:	d111      	bne.n	8002258 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800223c:	d004      	beq.n	8002248 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002246:	d107      	bne.n	8002258 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002260:	d10f      	bne.n	8002282 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002280:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e017      	b.n	80022c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4013      	ands	r3, r2
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d19b      	bne.n	80021fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000

080022d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2201      	movs	r2, #1
 80022e8:	2102      	movs	r1, #2
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff ff6a 	bl	80021c4 <SPI_WaitFlagStateUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fa:	f043 0220 	orr.w	r2, r3, #32
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e032      	b.n	800236c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <SPI_EndRxTxTransaction+0xa0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1b      	ldr	r2, [pc, #108]	@ (8002378 <SPI_EndRxTxTransaction+0xa4>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0d5b      	lsrs	r3, r3, #21
 8002312:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002324:	d112      	bne.n	800234c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff ff47 	bl	80021c4 <SPI_WaitFlagStateUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d016      	beq.n	800236a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e00f      	b.n	800236c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3b01      	subs	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002362:	2b80      	cmp	r3, #128	@ 0x80
 8002364:	d0f2      	beq.n	800234c <SPI_EndRxTxTransaction+0x78>
 8002366:	e000      	b.n	800236a <SPI_EndRxTxTransaction+0x96>
        break;
 8002368:	bf00      	nop
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000000 	.word	0x20000000
 8002378:	165e9f81 	.word	0x165e9f81

0800237c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e042      	b.n	8002414 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fbd0 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	@ 0x24
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f973 	bl	80026ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	d175      	bne.n	8002528 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_UART_Transmit+0x2c>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e06e      	b.n	800252a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2221      	movs	r2, #33	@ 0x21
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800245a:	f7fe fd15 	bl	8000e88 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002474:	d108      	bne.n	8002488 <HAL_UART_Transmit+0x6c>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	e003      	b.n	8002490 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002490:	e02e      	b.n	80024f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f848 	bl	8002532 <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e03a      	b.n	800252a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10b      	bne.n	80024d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	3302      	adds	r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e007      	b.n	80024e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3301      	adds	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1cb      	bne.n	8002492 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	2140      	movs	r1, #64	@ 0x40
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f814 	bl	8002532 <UART_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e006      	b.n	800252a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002542:	e03b      	b.n	80025bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d037      	beq.n	80025bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254c:	f7fe fc9c 	bl	8000e88 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	429a      	cmp	r2, r3
 800255a:	d302      	bcc.n	8002562 <UART_WaitOnFlagUntilTimeout+0x30>
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e03a      	b.n	80025dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d023      	beq.n	80025bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b80      	cmp	r3, #128	@ 0x80
 8002578:	d020      	beq.n	80025bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b40      	cmp	r3, #64	@ 0x40
 800257e:	d01d      	beq.n	80025bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b08      	cmp	r3, #8
 800258c:	d116      	bne.n	80025bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f81d 	bl	80025e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2208      	movs	r2, #8
 80025ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e00f      	b.n	80025dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4013      	ands	r3, r2
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d0b4      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b095      	sub	sp, #84	@ 0x54
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f6:	e853 3f00 	ldrex	r3, [r3]
 80025fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800260c:	643a      	str	r2, [r7, #64]	@ 0x40
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002614:	e841 2300 	strex	r3, r2, [r1]
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800261a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e5      	bne.n	80025ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3314      	adds	r3, #20
 800263e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002640:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002642:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e5      	bne.n	8002620 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002658:	2b01      	cmp	r3, #1
 800265a:	d119      	bne.n	8002690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	e853 3f00 	ldrex	r3, [r3]
 800266a:	60bb      	str	r3, [r7, #8]
   return(result);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f023 0310 	bic.w	r3, r3, #16
 8002672:	647b      	str	r3, [r7, #68]	@ 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800267c:	61ba      	str	r2, [r7, #24]
 800267e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002680:	6979      	ldr	r1, [r7, #20]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	e841 2300 	strex	r3, r2, [r1]
 8002688:	613b      	str	r3, [r7, #16]
   return(result);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e5      	bne.n	800265c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800269e:	bf00      	nop
 80026a0:	3754      	adds	r7, #84	@ 0x54
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b0c0      	sub	sp, #256	@ 0x100
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	ea40 0301 	orr.w	r3, r0, r1
 80026d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002704:	f021 010c 	bic.w	r1, r1, #12
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002712:	430b      	orrs	r3, r1
 8002714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002726:	6999      	ldr	r1, [r3, #24]
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	ea40 0301 	orr.w	r3, r0, r1
 8002732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b8f      	ldr	r3, [pc, #572]	@ (8002978 <UART_SetConfig+0x2cc>)
 800273c:	429a      	cmp	r2, r3
 800273e:	d005      	beq.n	800274c <UART_SetConfig+0xa0>
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b8d      	ldr	r3, [pc, #564]	@ (800297c <UART_SetConfig+0x2d0>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d104      	bne.n	8002756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800274c:	f7ff faec 	bl	8001d28 <HAL_RCC_GetPCLK2Freq>
 8002750:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002754:	e003      	b.n	800275e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002756:	f7ff fad3 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 800275a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002768:	f040 810c 	bne.w	8002984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800276c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002770:	2200      	movs	r2, #0
 8002772:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002776:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800277a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	1891      	adds	r1, r2, r2
 8002784:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002786:	415b      	adcs	r3, r3
 8002788:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800278a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800278e:	4621      	mov	r1, r4
 8002790:	eb12 0801 	adds.w	r8, r2, r1
 8002794:	4629      	mov	r1, r5
 8002796:	eb43 0901 	adc.w	r9, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ae:	4690      	mov	r8, r2
 80027b0:	4699      	mov	r9, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	eb18 0303 	adds.w	r3, r8, r3
 80027b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027bc:	462b      	mov	r3, r5
 80027be:	eb49 0303 	adc.w	r3, r9, r3
 80027c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027da:	460b      	mov	r3, r1
 80027dc:	18db      	adds	r3, r3, r3
 80027de:	653b      	str	r3, [r7, #80]	@ 0x50
 80027e0:	4613      	mov	r3, r2
 80027e2:	eb42 0303 	adc.w	r3, r2, r3
 80027e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80027e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027f0:	f7fd fd3e 	bl	8000270 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4b61      	ldr	r3, [pc, #388]	@ (8002980 <UART_SetConfig+0x2d4>)
 80027fa:	fba3 2302 	umull	r2, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	011c      	lsls	r4, r3, #4
 8002802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800280c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	1891      	adds	r1, r2, r2
 800281a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800281c:	415b      	adcs	r3, r3
 800281e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002824:	4641      	mov	r1, r8
 8002826:	eb12 0a01 	adds.w	sl, r2, r1
 800282a:	4649      	mov	r1, r9
 800282c:	eb43 0b01 	adc.w	fp, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800283c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002844:	4692      	mov	sl, r2
 8002846:	469b      	mov	fp, r3
 8002848:	4643      	mov	r3, r8
 800284a:	eb1a 0303 	adds.w	r3, sl, r3
 800284e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002852:	464b      	mov	r3, r9
 8002854:	eb4b 0303 	adc.w	r3, fp, r3
 8002858:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002868:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800286c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002870:	460b      	mov	r3, r1
 8002872:	18db      	adds	r3, r3, r3
 8002874:	643b      	str	r3, [r7, #64]	@ 0x40
 8002876:	4613      	mov	r3, r2
 8002878:	eb42 0303 	adc.w	r3, r2, r3
 800287c:	647b      	str	r3, [r7, #68]	@ 0x44
 800287e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002886:	f7fd fcf3 	bl	8000270 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4611      	mov	r1, r2
 8002890:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <UART_SetConfig+0x2d4>)
 8002892:	fba3 2301 	umull	r2, r3, r3, r1
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2264      	movs	r2, #100	@ 0x64
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	1acb      	subs	r3, r1, r3
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <UART_SetConfig+0x2d4>)
 80028a8:	fba3 2302 	umull	r2, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028b4:	441c      	add	r4, r3
 80028b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028c8:	4642      	mov	r2, r8
 80028ca:	464b      	mov	r3, r9
 80028cc:	1891      	adds	r1, r2, r2
 80028ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028d0:	415b      	adcs	r3, r3
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028d8:	4641      	mov	r1, r8
 80028da:	1851      	adds	r1, r2, r1
 80028dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80028de:	4649      	mov	r1, r9
 80028e0:	414b      	adcs	r3, r1
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028f0:	4659      	mov	r1, fp
 80028f2:	00cb      	lsls	r3, r1, #3
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fa:	4651      	mov	r1, sl
 80028fc:	00ca      	lsls	r2, r1, #3
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	4603      	mov	r3, r0
 8002904:	4642      	mov	r2, r8
 8002906:	189b      	adds	r3, r3, r2
 8002908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800290c:	464b      	mov	r3, r9
 800290e:	460a      	mov	r2, r1
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002924:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800292c:	460b      	mov	r3, r1
 800292e:	18db      	adds	r3, r3, r3
 8002930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002932:	4613      	mov	r3, r2
 8002934:	eb42 0303 	adc.w	r3, r2, r3
 8002938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800293e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002942:	f7fd fc95 	bl	8000270 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <UART_SetConfig+0x2d4>)
 800294c:	fba3 1302 	umull	r1, r3, r3, r2
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	2164      	movs	r1, #100	@ 0x64
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	3332      	adds	r3, #50	@ 0x32
 800295e:	4a08      	ldr	r2, [pc, #32]	@ (8002980 <UART_SetConfig+0x2d4>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	f003 0207 	and.w	r2, r3, #7
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4422      	add	r2, r4
 8002972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002974:	e106      	b.n	8002b84 <UART_SetConfig+0x4d8>
 8002976:	bf00      	nop
 8002978:	40011000 	.word	0x40011000
 800297c:	40011400 	.word	0x40011400
 8002980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800298e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002996:	4642      	mov	r2, r8
 8002998:	464b      	mov	r3, r9
 800299a:	1891      	adds	r1, r2, r2
 800299c:	6239      	str	r1, [r7, #32]
 800299e:	415b      	adcs	r3, r3
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029a6:	4641      	mov	r1, r8
 80029a8:	1854      	adds	r4, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb43 0501 	adc.w	r5, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	00eb      	lsls	r3, r5, #3
 80029ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029be:	00e2      	lsls	r2, r4, #3
 80029c0:	4614      	mov	r4, r2
 80029c2:	461d      	mov	r5, r3
 80029c4:	4643      	mov	r3, r8
 80029c6:	18e3      	adds	r3, r4, r3
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029cc:	464b      	mov	r3, r9
 80029ce:	eb45 0303 	adc.w	r3, r5, r3
 80029d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029f2:	4629      	mov	r1, r5
 80029f4:	008b      	lsls	r3, r1, #2
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029fc:	4621      	mov	r1, r4
 80029fe:	008a      	lsls	r2, r1, #2
 8002a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a04:	f7fd fc34 	bl	8000270 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4b60      	ldr	r3, [pc, #384]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	011c      	lsls	r4, r3, #4
 8002a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a28:	4642      	mov	r2, r8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	1891      	adds	r1, r2, r2
 8002a2e:	61b9      	str	r1, [r7, #24]
 8002a30:	415b      	adcs	r3, r3
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a38:	4641      	mov	r1, r8
 8002a3a:	1851      	adds	r1, r2, r1
 8002a3c:	6139      	str	r1, [r7, #16]
 8002a3e:	4649      	mov	r1, r9
 8002a40:	414b      	adcs	r3, r1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a50:	4659      	mov	r1, fp
 8002a52:	00cb      	lsls	r3, r1, #3
 8002a54:	4651      	mov	r1, sl
 8002a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	00ca      	lsls	r2, r1, #3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	4642      	mov	r2, r8
 8002a66:	189b      	adds	r3, r3, r2
 8002a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a6c:	464b      	mov	r3, r9
 8002a6e:	460a      	mov	r2, r1
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a90:	4649      	mov	r1, r9
 8002a92:	008b      	lsls	r3, r1, #2
 8002a94:	4641      	mov	r1, r8
 8002a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	008a      	lsls	r2, r1, #2
 8002a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002aa2:	f7fd fbe5 	bl	8000270 <__aeabi_uldivmod>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4b38      	ldr	r3, [pc, #224]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002aae:	fba3 2301 	umull	r2, r3, r3, r1
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2264      	movs	r2, #100	@ 0x64
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	1acb      	subs	r3, r1, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	@ 0x32
 8002ac0:	4a33      	ldr	r2, [pc, #204]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002acc:	441c      	add	r4, r3
 8002ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ad6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ad8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	1891      	adds	r1, r2, r2
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	415b      	adcs	r3, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aec:	4641      	mov	r1, r8
 8002aee:	1851      	adds	r1, r2, r1
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	4649      	mov	r1, r9
 8002af4:	414b      	adcs	r3, r1
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b04:	4659      	mov	r1, fp
 8002b06:	00cb      	lsls	r3, r1, #3
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0e:	4651      	mov	r1, sl
 8002b10:	00ca      	lsls	r2, r1, #3
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	4642      	mov	r2, r8
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b1e:	464b      	mov	r3, r9
 8002b20:	460a      	mov	r2, r1
 8002b22:	eb42 0303 	adc.w	r3, r2, r3
 8002b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b32:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b40:	4649      	mov	r1, r9
 8002b42:	008b      	lsls	r3, r1, #2
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	008a      	lsls	r2, r1, #2
 8002b4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b52:	f7fd fb8d 	bl	8000270 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	2164      	movs	r1, #100	@ 0x64
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	3332      	adds	r3, #50	@ 0x32
 8002b6e:	4a08      	ldr	r2, [pc, #32]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4422      	add	r2, r4
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b90:	51eb851f 	.word	0x51eb851f

08002b94 <readRegister>:
/*------------------------------------Extern Variables-------------------------------*/
extern SPI_HandleTypeDef hspi1;

/*------------------------------------Function Definitions-------------------------------*/

uint8_t readRegister(uint8_t *outputPointer, uint8_t offset) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]

	uint8_t TxData = (offset | 0x80);
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	73bb      	strb	r3, [r7, #14]
	uint8_t RxData = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	737b      	strb	r3, [r7, #13]
	uint8_t error = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	4816      	ldr	r0, [pc, #88]	@ (8002c10 <readRegister+0x7c>)
 8002bb8:	f7fe fc18 	bl	80013ec <HAL_GPIO_WritePin>

	error = HAL_SPI_TransmitReceive(&hspi1, &TxData, &RxData, 1, 10);
 8002bbc:	f107 020d 	add.w	r2, r7, #13
 8002bc0:	f107 010e 	add.w	r1, r7, #14
 8002bc4:	230a      	movs	r3, #10
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	4812      	ldr	r0, [pc, #72]	@ (8002c14 <readRegister+0x80>)
 8002bcc:	f7ff f949 	bl	8001e62 <HAL_SPI_TransmitReceive>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	73fb      	strb	r3, [r7, #15]

	TxData = 0x00;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73bb      	strb	r3, [r7, #14]

	error |= HAL_SPI_TransmitReceive(&hspi1, &TxData, &RxData, 1, 10);
 8002bd8:	f107 020d 	add.w	r2, r7, #13
 8002bdc:	f107 010e 	add.w	r1, r7, #14
 8002be0:	230a      	movs	r3, #10
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2301      	movs	r3, #1
 8002be6:	480b      	ldr	r0, [pc, #44]	@ (8002c14 <readRegister+0x80>)
 8002be8:	f7ff f93b 	bl	8001e62 <HAL_SPI_TransmitReceive>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2108      	movs	r1, #8
 8002bfa:	4805      	ldr	r0, [pc, #20]	@ (8002c10 <readRegister+0x7c>)
 8002bfc:	f7fe fbf6 	bl	80013ec <HAL_GPIO_WritePin>

	*outputPointer = RxData;
 8002c00:	7b7a      	ldrb	r2, [r7, #13]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	701a      	strb	r2, [r3, #0]

	return error;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]

}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	20000084 	.word	0x20000084

08002c18 <readRegisterInt16>:

uint8_t readRegisterInt16(int16_t *outputPointer, uint8_t offset) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]

	uint8_t myBuffer[2];
	uint8_t returnError = readRegisterRegion(myBuffer, offset, 2); //Does memory transfer
 8002c24:	78f9      	ldrb	r1, [r7, #3]
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f811 	bl	8002c54 <readRegisterRegion>
 8002c32:	4603      	mov	r3, r0
 8002c34:	73fb      	strb	r3, [r7, #15]
	int16_t output = (int16_t) (myBuffer[0]) | ((int16_t) (myBuffer[1]) << 8);
 8002c36:	7a3b      	ldrb	r3, [r7, #8]
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	7a7b      	ldrb	r3, [r7, #9]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	4313      	orrs	r3, r2
 8002c42:	81bb      	strh	r3, [r7, #12]
	*outputPointer = output;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	89ba      	ldrh	r2, [r7, #12]
 8002c48:	801a      	strh	r2, [r3, #0]
	return returnError;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <readRegisterRegion>:

uint8_t readRegisterRegion(uint8_t *outputPointer, uint8_t offset,
		uint8_t length) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
 8002c60:	4613      	mov	r3, r2
 8002c62:	70bb      	strb	r3, [r7, #2]

	uint8_t i = 0, TxData = 0, RxData = 0, tempFFCounter = 0,
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	733b      	strb	r3, [r7, #12]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	72fb      	strb	r3, [r7, #11]
 8002c70:	2300      	movs	r3, #0
 8002c72:	73bb      	strb	r3, [r7, #14]
			returnError = 0x00;
 8002c74:	2300      	movs	r3, #0
 8002c76:	737b      	strb	r3, [r7, #13]

	// take the chip select low to select the device:
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2108      	movs	r1, #8
 8002c7c:	4825      	ldr	r0, [pc, #148]	@ (8002d14 <readRegisterRegion+0xc0>)
 8002c7e:	f7fe fbb5 	bl	80013ec <HAL_GPIO_WritePin>

	//Ored with "read request" bit
	TxData = (offset | 0x80);
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	733b      	strb	r3, [r7, #12]

	// send the device the register you want to read:
	returnError = HAL_SPI_TransmitReceive(&hspi1, &TxData, &RxData, 1, 10);
 8002c8c:	f107 020b 	add.w	r2, r7, #11
 8002c90:	f107 010c 	add.w	r1, r7, #12
 8002c94:	230a      	movs	r3, #10
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2301      	movs	r3, #1
 8002c9a:	481f      	ldr	r0, [pc, #124]	@ (8002d18 <readRegisterRegion+0xc4>)
 8002c9c:	f7ff f8e1 	bl	8001e62 <HAL_SPI_TransmitReceive>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	737b      	strb	r3, [r7, #13]

	TxData = 0x00;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	733b      	strb	r3, [r7, #12]

	while (i < length) // slave may send less than requested
 8002ca8:	e01d      	b.n	8002ce6 <readRegisterRegion+0x92>
	{
		returnError |= HAL_SPI_TransmitReceive(&hspi1, &TxData, &RxData, 1, 10); //receive a byte as character
 8002caa:	f107 020b 	add.w	r2, r7, #11
 8002cae:	f107 010c 	add.w	r1, r7, #12
 8002cb2:	230a      	movs	r3, #10
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4817      	ldr	r0, [pc, #92]	@ (8002d18 <readRegisterRegion+0xc4>)
 8002cba:	f7ff f8d2 	bl	8001e62 <HAL_SPI_TransmitReceive>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	7b7b      	ldrb	r3, [r7, #13]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	737b      	strb	r3, [r7, #13]

		if (RxData == 0xFF) {
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	2bff      	cmp	r3, #255	@ 0xff
 8002ccc:	d102      	bne.n	8002cd4 <readRegisterRegion+0x80>
			//May have problem
			tempFFCounter++;
 8002cce:	7bbb      	ldrb	r3, [r7, #14]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	73bb      	strb	r3, [r7, #14]
		}
		*outputPointer = RxData;
 8002cd4:	7afa      	ldrb	r2, [r7, #11]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	701a      	strb	r2, [r3, #0]
		outputPointer++;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	607b      	str	r3, [r7, #4]
		i++;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
	while (i < length) // slave may send less than requested
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	78bb      	ldrb	r3, [r7, #2]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d3dd      	bcc.n	8002caa <readRegisterRegion+0x56>
	}

	if (tempFFCounter == i) {
 8002cee:	7bba      	ldrb	r2, [r7, #14]
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d103      	bne.n	8002cfe <readRegisterRegion+0xaa>
		returnError |= 0x01;	//Ok, we've recieved all ones, report
 8002cf6:	7b7b      	ldrb	r3, [r7, #13]
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	737b      	strb	r3, [r7, #13]
	}

	// take the chip select high to de-select:
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8002cfe:	2201      	movs	r2, #1
 8002d00:	2108      	movs	r1, #8
 8002d02:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <readRegisterRegion+0xc0>)
 8002d04:	f7fe fb72 	bl	80013ec <HAL_GPIO_WritePin>

	return returnError;
 8002d08:	7b7b      	ldrb	r3, [r7, #13]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	20000084 	.word	0x20000084

08002d1c <writeRegister>:

uint8_t writeRegister(uint8_t offset, uint8_t dataToWrite) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	4603      	mov	r3, r0
 8002d24:	460a      	mov	r2, r1
 8002d26:	71fb      	strb	r3, [r7, #7]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	71bb      	strb	r3, [r7, #6]

	uint8_t RxData = 0x00;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73bb      	strb	r3, [r7, #14]
	uint8_t error = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]

	// take the chip select low to select the device:
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2108      	movs	r1, #8
 8002d38:	4812      	ldr	r0, [pc, #72]	@ (8002d84 <writeRegister+0x68>)
 8002d3a:	f7fe fb57 	bl	80013ec <HAL_GPIO_WritePin>

	// send the device the register you want to read:
	error = HAL_SPI_TransmitReceive(&hspi1, &offset, &RxData, 1, 10);
 8002d3e:	f107 020e 	add.w	r2, r7, #14
 8002d42:	1df9      	adds	r1, r7, #7
 8002d44:	230a      	movs	r3, #10
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2301      	movs	r3, #1
 8002d4a:	480f      	ldr	r0, [pc, #60]	@ (8002d88 <writeRegister+0x6c>)
 8002d4c:	f7ff f889 	bl	8001e62 <HAL_SPI_TransmitReceive>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]

	error |= HAL_SPI_TransmitReceive(&hspi1, &dataToWrite, &RxData, 1, 10);
 8002d54:	f107 020e 	add.w	r2, r7, #14
 8002d58:	1db9      	adds	r1, r7, #6
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4809      	ldr	r0, [pc, #36]	@ (8002d88 <writeRegister+0x6c>)
 8002d62:	f7ff f87e 	bl	8001e62 <HAL_SPI_TransmitReceive>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	73fb      	strb	r3, [r7, #15]

	// take the chip select high to de-select:
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8002d70:	2201      	movs	r2, #1
 8002d72:	2108      	movs	r1, #8
 8002d74:	4803      	ldr	r0, [pc, #12]	@ (8002d84 <writeRegister+0x68>)
 8002d76:	f7fe fb39 	bl	80013ec <HAL_GPIO_WritePin>

	return error;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	20000084 	.word	0x20000084

08002d8c <Check_ID>:

uint8_t Check_ID(void) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
	uint8_t returnError = 0x00;
 8002d92:	2300      	movs	r3, #0
 8002d94:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(10);
 8002d96:	200a      	movs	r0, #10
 8002d98:	f7fe f882 	bl	8000ea0 <HAL_Delay>

	//Check the ID register to determine if the operation was a success.

	uint8_t Read_Data = 0x00;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	71bb      	strb	r3, [r7, #6]

	if (readRegister(&Read_Data, WHO_AM_I) != HAL_OK) {
 8002da0:	1dbb      	adds	r3, r7, #6
 8002da2:	210f      	movs	r1, #15
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fef5 	bl	8002b94 <readRegister>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d004      	beq.n	8002dba <Check_ID+0x2e>
		printf("\nSPI Failed!");
 8002db0:	4813      	ldr	r0, [pc, #76]	@ (8002e00 <Check_ID+0x74>)
 8002db2:	f000 fae1 	bl	8003378 <iprintf>
		Error_Handler();
 8002db6:	f7fd fe47 	bl	8000a48 <Error_Handler>
	}

	if (readRegister(&Read_Data, WHO_AM_I) != HAL_OK) {
 8002dba:	1dbb      	adds	r3, r7, #6
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fee8 	bl	8002b94 <readRegister>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <Check_ID+0x48>
		printf("\nSPI Failed!");
 8002dca:	480d      	ldr	r0, [pc, #52]	@ (8002e00 <Check_ID+0x74>)
 8002dcc:	f000 fad4 	bl	8003378 <iprintf>
		Error_Handler();
 8002dd0:	f7fd fe3a 	bl	8000a48 <Error_Handler>
	}

	if (Read_Data != 0x3F) {
 8002dd4:	79bb      	ldrb	r3, [r7, #6]
 8002dd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dd8:	d007      	beq.n	8002dea <Check_ID+0x5e>

		printf("\nDevice ID not received:(\nWHO_AM_I: 0x%X", Read_Data);
 8002dda:	79bb      	ldrb	r3, [r7, #6]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4809      	ldr	r0, [pc, #36]	@ (8002e04 <Check_ID+0x78>)
 8002de0:	f000 faca 	bl	8003378 <iprintf>
		returnError = 0x01;
 8002de4:	2301      	movs	r3, #1
 8002de6:	71fb      	strb	r3, [r7, #7]
 8002de8:	e004      	b.n	8002df4 <Check_ID+0x68>
	} else {
		printf("\nDevice ID successfully received:)\nWHO_AM_I: 0x%X",
 8002dea:	79bb      	ldrb	r3, [r7, #6]
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	@ (8002e08 <Check_ID+0x7c>)
 8002df0:	f000 fac2 	bl	8003378 <iprintf>
				Read_Data);
	}

	return returnError;
 8002df4:	79fb      	ldrb	r3, [r7, #7]

}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08004244 	.word	0x08004244
 8002e04:	08004254 	.word	0x08004254
 8002e08:	08004280 	.word	0x08004280

08002e0c <LIS3DSH_Init>:

uint8_t LIS3DSH_Init(void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0

	uint8_t error = 0x00, ctrl = 0x67;//ODR: 100Hz, BDU:0(continuous update), Zen:1, Yen:1, Xen:1
 8002e12:	2300      	movs	r3, #0
 8002e14:	71fb      	strb	r3, [r7, #7]
 8002e16:	2367      	movs	r3, #103	@ 0x67
 8002e18:	71bb      	strb	r3, [r7, #6]

	/* Write value to MEMS CTRL_REG4 register */
	error = writeRegister(CTRL_REG4, ctrl);
 8002e1a:	79bb      	ldrb	r3, [r7, #6]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	2020      	movs	r0, #32
 8002e20:	f7ff ff7c 	bl	8002d1c <writeRegister>
 8002e24:	4603      	mov	r3, r0
 8002e26:	71fb      	strb	r3, [r7, #7]

	/* Configure MEMS: full scale and self test */
	//ctrl = 0x20;
	ctrl = 0x08;
 8002e28:	2308      	movs	r3, #8
 8002e2a:	71bb      	strb	r3, [r7, #6]
	/* Write value to MEMS CTRL_REG5 register */
	error |= writeRegister(CTRL_REG5, ctrl);
 8002e2c:	79bb      	ldrb	r3, [r7, #6]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	2024      	movs	r0, #36	@ 0x24
 8002e32:	f7ff ff73 	bl	8002d1c <writeRegister>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]

	return error;
 8002e40:	79fb      	ldrb	r3, [r7, #7]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <LIS3DSH_ReadACC>:

void LIS3DSH_ReadACC(int16_t* buffer) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

	uint8_t registerValue = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	72fb      	strb	r3, [r7, #11]
	float sensitivity;

	readRegister(&registerValue, STATUS); //read STATUS to check new data updated in X,Y & Z registers
 8002e58:	f107 030b 	add.w	r3, r7, #11
 8002e5c:	2127      	movs	r1, #39	@ 0x27
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe98 	bl	8002b94 <readRegister>

	if ((registerValue & 0x08) == 0x08)
 8002e64:	7afb      	ldrb	r3, [r7, #11]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80ba 	beq.w	8002fe4 <LIS3DSH_ReadACC+0x198>
	{
		readRegisterInt16(buffer, OUT_X_L);
 8002e70:	2128      	movs	r1, #40	@ 0x28
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fed0 	bl	8002c18 <readRegisterInt16>
		readRegisterInt16(buffer+1, OUT_Y_L);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	212a      	movs	r1, #42	@ 0x2a
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff feca 	bl	8002c18 <readRegisterInt16>
		readRegisterInt16(buffer+2, OUT_Z_L);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	212c      	movs	r1, #44	@ 0x2c
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fec4 	bl	8002c18 <readRegisterInt16>

		//printf("\nAccel_X:%d\tAccel_Y:%d\tAccel_Z:%d", buffer[0], buffer[1], buffer[2]);

		readRegister(&registerValue, CTRL_REG5);
 8002e90:	f107 030b 	add.w	r3, r7, #11
 8002e94:	2124      	movs	r1, #36	@ 0x24
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe7c 	bl	8002b94 <readRegister>

		switch(registerValue & LIS3DSH__FULLSCALE_SELECTION)
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d853      	bhi.n	8002f4e <LIS3DSH_ReadACC+0x102>
 8002ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <LIS3DSH_ReadACC+0x60>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002f31 	.word	0x08002f31
 8002eb0:	08002f4f 	.word	0x08002f4f
 8002eb4:	08002f4f 	.word	0x08002f4f
 8002eb8:	08002f4f 	.word	0x08002f4f
 8002ebc:	08002f4f 	.word	0x08002f4f
 8002ec0:	08002f4f 	.word	0x08002f4f
 8002ec4:	08002f4f 	.word	0x08002f4f
 8002ec8:	08002f4f 	.word	0x08002f4f
 8002ecc:	08002f37 	.word	0x08002f37
 8002ed0:	08002f4f 	.word	0x08002f4f
 8002ed4:	08002f4f 	.word	0x08002f4f
 8002ed8:	08002f4f 	.word	0x08002f4f
 8002edc:	08002f4f 	.word	0x08002f4f
 8002ee0:	08002f4f 	.word	0x08002f4f
 8002ee4:	08002f4f 	.word	0x08002f4f
 8002ee8:	08002f4f 	.word	0x08002f4f
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f4f 	.word	0x08002f4f
 8002ef4:	08002f4f 	.word	0x08002f4f
 8002ef8:	08002f4f 	.word	0x08002f4f
 8002efc:	08002f4f 	.word	0x08002f4f
 8002f00:	08002f4f 	.word	0x08002f4f
 8002f04:	08002f4f 	.word	0x08002f4f
 8002f08:	08002f4f 	.word	0x08002f4f
 8002f0c:	08002f43 	.word	0x08002f43
 8002f10:	08002f4f 	.word	0x08002f4f
 8002f14:	08002f4f 	.word	0x08002f4f
 8002f18:	08002f4f 	.word	0x08002f4f
 8002f1c:	08002f4f 	.word	0x08002f4f
 8002f20:	08002f4f 	.word	0x08002f4f
 8002f24:	08002f4f 	.word	0x08002f4f
 8002f28:	08002f4f 	.word	0x08002f4f
 8002f2c:	08002f49 	.word	0x08002f49
		{
			/* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */
			case LIS3DSH_FULLSCALE_2:
			sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8002f30:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <LIS3DSH_ReadACC+0x1a0>)
 8002f32:	60fb      	str	r3, [r7, #12]
			break;
 8002f34:	e00c      	b.n	8002f50 <LIS3DSH_ReadACC+0x104>

			/* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */
			case LIS3DSH_FULLSCALE_4:
			sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8002f36:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff0 <LIS3DSH_ReadACC+0x1a4>)
 8002f38:	60fb      	str	r3, [r7, #12]
			break;
 8002f3a:	e009      	b.n	8002f50 <LIS3DSH_ReadACC+0x104>

			/* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */
			case LIS3DSH_FULLSCALE_6:
			sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <LIS3DSH_ReadACC+0x1a8>)
 8002f3e:	60fb      	str	r3, [r7, #12]
			break;
 8002f40:	e006      	b.n	8002f50 <LIS3DSH_ReadACC+0x104>

			/* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */
			case LIS3DSH_FULLSCALE_8:
			sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8002f42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff8 <LIS3DSH_ReadACC+0x1ac>)
 8002f44:	60fb      	str	r3, [r7, #12]
			break;
 8002f46:	e003      	b.n	8002f50 <LIS3DSH_ReadACC+0x104>

			/* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */
			case LIS3DSH_FULLSCALE_16:
			sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8002f48:	4b2c      	ldr	r3, [pc, #176]	@ (8002ffc <LIS3DSH_ReadACC+0x1b0>)
 8002f4a:	60fb      	str	r3, [r7, #12]
			break;
 8002f4c:	e000      	b.n	8002f50 <LIS3DSH_ReadACC+0x104>

			default:
			break;
 8002f4e:	bf00      	nop
		}

		/* Obtain the mg value for the three axis */
		buffer[0] = (int16_t)(buffer[0] * sensitivity);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6a:	ee17 3a90 	vmov	r3, s15
 8002f6e:	b21a      	sxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	801a      	strh	r2, [r3, #0]
		buffer[1] = (int16_t)(buffer[1] * sensitivity);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3302      	adds	r3, #2
 8002f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3302      	adds	r3, #2
 8002f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f94:	ee17 2a90 	vmov	r2, s15
 8002f98:	b212      	sxth	r2, r2
 8002f9a:	801a      	strh	r2, [r3, #0]
		buffer[2] = (int16_t)(buffer[2] * sensitivity);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fbc:	ee17 2a90 	vmov	r2, s15
 8002fc0:	b212      	sxth	r2, r2
 8002fc2:	801a      	strh	r2, [r3, #0]

		printf("\nAccel_X:%d\tAccel_Y:%d\tAccel_Z:%d", buffer[0], buffer[1], buffer[2]);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3302      	adds	r3, #2
 8002fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fde:	4808      	ldr	r0, [pc, #32]	@ (8003000 <LIS3DSH_ReadACC+0x1b4>)
 8002fe0:	f000 f9ca 	bl	8003378 <iprintf>
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	3d75c28f 	.word	0x3d75c28f
 8002ff0:	3df5c28f 	.word	0x3df5c28f
 8002ff4:	3e3851ec 	.word	0x3e3851ec
 8002ff8:	3e75c28f 	.word	0x3e75c28f
 8002ffc:	3f3ae148 	.word	0x3f3ae148
 8003000:	080042b4 	.word	0x080042b4

08003004 <DropLed>:

void DropLed(int16_t* buffer)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	if(buffer[0] > 800 && buffer[0] < 1200 &&
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003012:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003016:	dd2b      	ble.n	8003070 <DropLed+0x6c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8003022:	da25      	bge.n	8003070 <DropLed+0x6c>
	   buffer[1] > -500 && buffer[1] < 500 &&
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3302      	adds	r3, #2
 8003028:	f9b3 3000 	ldrsh.w	r3, [r3]
	if(buffer[0] > 800 && buffer[0] < 1200 &&
 800302c:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8003030:	dd1e      	ble.n	8003070 <DropLed+0x6c>
	   buffer[1] > -500 && buffer[1] < 500 &&
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3302      	adds	r3, #2
 8003036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800303e:	da17      	bge.n	8003070 <DropLed+0x6c>
	   buffer[2] > -500 && buffer[2] < 500)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	f9b3 3000 	ldrsh.w	r3, [r3]
	   buffer[1] > -500 && buffer[1] < 500 &&
 8003048:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800304c:	dd10      	ble.n	8003070 <DropLed+0x6c>
	   buffer[2] > -500 && buffer[2] < 500)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003056:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800305a:	da09      	bge.n	8003070 <DropLed+0x6c>
	{
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,GPIO_PIN_RESET);
 800305c:	2200      	movs	r2, #0
 800305e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003062:	4863      	ldr	r0, [pc, #396]	@ (80031f0 <DropLed+0x1ec>)
 8003064:	f7fe f9c2 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8003068:	20c8      	movs	r0, #200	@ 0xc8
 800306a:	f7fd ff19 	bl	8000ea0 <HAL_Delay>
 800306e:	e008      	b.n	8003082 <DropLed+0x7e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,GPIO_PIN_SET);
 8003070:	2201      	movs	r2, #1
 8003072:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003076:	485e      	ldr	r0, [pc, #376]	@ (80031f0 <DropLed+0x1ec>)
 8003078:	f7fe f9b8 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800307c:	2032      	movs	r0, #50	@ 0x32
 800307e:	f7fd ff0f 	bl	8000ea0 <HAL_Delay>
	}

	if(buffer[0] > -500 && buffer[0] < 500 &&
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003088:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800308c:	dd2b      	ble.n	80030e6 <DropLed+0xe2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003094:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003098:	da25      	bge.n	80030e6 <DropLed+0xe2>
	   buffer[1] > -1200 && buffer[1] < -800 &&
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3302      	adds	r3, #2
 800309e:	f9b3 3000 	ldrsh.w	r3, [r3]
	if(buffer[0] > -500 && buffer[0] < 500 &&
 80030a2:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 80030a6:	dd1e      	ble.n	80030e6 <DropLed+0xe2>
	   buffer[1] > -1200 && buffer[1] < -800 &&
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3302      	adds	r3, #2
 80030ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b0:	f513 7f48 	cmn.w	r3, #800	@ 0x320
 80030b4:	da17      	bge.n	80030e6 <DropLed+0xe2>
	   buffer[2] > -500 && buffer[2] < 500)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	f9b3 3000 	ldrsh.w	r3, [r3]
	   buffer[1] > -1200 && buffer[1] < -800 &&
 80030be:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80030c2:	dd10      	ble.n	80030e6 <DropLed+0xe2>
	   buffer[2] > -500 && buffer[2] < 500)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030cc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80030d0:	da09      	bge.n	80030e6 <DropLed+0xe2>
	{
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,GPIO_PIN_RESET);
 80030d2:	2200      	movs	r2, #0
 80030d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030d8:	4845      	ldr	r0, [pc, #276]	@ (80031f0 <DropLed+0x1ec>)
 80030da:	f7fe f987 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80030de:	20c8      	movs	r0, #200	@ 0xc8
 80030e0:	f7fd fede 	bl	8000ea0 <HAL_Delay>
 80030e4:	e008      	b.n	80030f8 <DropLed+0xf4>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,GPIO_PIN_SET);
 80030e6:	2201      	movs	r2, #1
 80030e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030ec:	4840      	ldr	r0, [pc, #256]	@ (80031f0 <DropLed+0x1ec>)
 80030ee:	f7fe f97d 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80030f2:	2032      	movs	r0, #50	@ 0x32
 80030f4:	f7fd fed4 	bl	8000ea0 <HAL_Delay>
	}

	if(buffer[0] > -1200 && buffer[0] < -800 &&
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fe:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 8003102:	dd2b      	ble.n	800315c <DropLed+0x158>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310a:	f513 7f48 	cmn.w	r3, #800	@ 0x320
 800310e:	da25      	bge.n	800315c <DropLed+0x158>
	   buffer[1] > -500 && buffer[1] < 500 &&
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3302      	adds	r3, #2
 8003114:	f9b3 3000 	ldrsh.w	r3, [r3]
	if(buffer[0] > -1200 && buffer[0] < -800 &&
 8003118:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800311c:	dd1e      	ble.n	800315c <DropLed+0x158>
	   buffer[1] > -500 && buffer[1] < 500 &&
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3302      	adds	r3, #2
 8003122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003126:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800312a:	da17      	bge.n	800315c <DropLed+0x158>
	   buffer[2] > -500 && buffer[2] < 500)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	f9b3 3000 	ldrsh.w	r3, [r3]
	   buffer[1] > -500 && buffer[1] < 500 &&
 8003134:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8003138:	dd10      	ble.n	800315c <DropLed+0x158>
	   buffer[2] > -500 && buffer[2] < 500)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003142:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003146:	da09      	bge.n	800315c <DropLed+0x158>
	{
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,GPIO_PIN_RESET);
 8003148:	2200      	movs	r2, #0
 800314a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800314e:	4828      	ldr	r0, [pc, #160]	@ (80031f0 <DropLed+0x1ec>)
 8003150:	f7fe f94c 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8003154:	20c8      	movs	r0, #200	@ 0xc8
 8003156:	f7fd fea3 	bl	8000ea0 <HAL_Delay>
 800315a:	e008      	b.n	800316e <DropLed+0x16a>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,GPIO_PIN_SET);
 800315c:	2201      	movs	r2, #1
 800315e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003162:	4823      	ldr	r0, [pc, #140]	@ (80031f0 <DropLed+0x1ec>)
 8003164:	f7fe f942 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8003168:	2032      	movs	r0, #50	@ 0x32
 800316a:	f7fd fe99 	bl	8000ea0 <HAL_Delay>
	}

	if(buffer[0] > -500 && buffer[0] < 500 &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003174:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8003178:	dd2c      	ble.n	80031d4 <DropLed+0x1d0>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003180:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003184:	da26      	bge.n	80031d4 <DropLed+0x1d0>
	   buffer[1] > 900 && buffer[1] < 1300 &&
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3302      	adds	r3, #2
 800318a:	f9b3 3000 	ldrsh.w	r3, [r3]
	if(buffer[0] > -500 && buffer[0] < 500 &&
 800318e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8003192:	dd1f      	ble.n	80031d4 <DropLed+0x1d0>
	   buffer[1] > 900 && buffer[1] < 1300 &&
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3302      	adds	r3, #2
 8003198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800319c:	f240 5213 	movw	r2, #1299	@ 0x513
 80031a0:	4293      	cmp	r3, r2
 80031a2:	dc17      	bgt.n	80031d4 <DropLed+0x1d0>
	   buffer[2] > -500 && buffer[2] < 500)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	f9b3 3000 	ldrsh.w	r3, [r3]
	   buffer[1] > 900 && buffer[1] < 1300 &&
 80031ac:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80031b0:	dd10      	ble.n	80031d4 <DropLed+0x1d0>
	   buffer[2] > -500 && buffer[2] < 500)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031be:	da09      	bge.n	80031d4 <DropLed+0x1d0>
	{
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,GPIO_PIN_RESET);
 80031c0:	2200      	movs	r2, #0
 80031c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031c6:	480a      	ldr	r0, [pc, #40]	@ (80031f0 <DropLed+0x1ec>)
 80031c8:	f7fe f910 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80031cc:	20c8      	movs	r0, #200	@ 0xc8
 80031ce:	f7fd fe67 	bl	8000ea0 <HAL_Delay>
 80031d2:	e009      	b.n	80031e8 <DropLed+0x1e4>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,GPIO_PIN_SET);
 80031d4:	2201      	movs	r2, #1
 80031d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031da:	4805      	ldr	r0, [pc, #20]	@ (80031f0 <DropLed+0x1ec>)
 80031dc:	f7fe f906 	bl	80013ec <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80031e0:	2032      	movs	r0, #50	@ 0x32
 80031e2:	f7fd fe5d 	bl	8000ea0 <HAL_Delay>
	}
}
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40020c00 	.word	0x40020c00

080031f4 <std>:
 80031f4:	2300      	movs	r3, #0
 80031f6:	b510      	push	{r4, lr}
 80031f8:	4604      	mov	r4, r0
 80031fa:	e9c0 3300 	strd	r3, r3, [r0]
 80031fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003202:	6083      	str	r3, [r0, #8]
 8003204:	8181      	strh	r1, [r0, #12]
 8003206:	6643      	str	r3, [r0, #100]	@ 0x64
 8003208:	81c2      	strh	r2, [r0, #14]
 800320a:	6183      	str	r3, [r0, #24]
 800320c:	4619      	mov	r1, r3
 800320e:	2208      	movs	r2, #8
 8003210:	305c      	adds	r0, #92	@ 0x5c
 8003212:	f000 f9ba 	bl	800358a <memset>
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <std+0x58>)
 8003218:	6263      	str	r3, [r4, #36]	@ 0x24
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <std+0x5c>)
 800321c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <std+0x60>)
 8003220:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003222:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <std+0x64>)
 8003224:	6323      	str	r3, [r4, #48]	@ 0x30
 8003226:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <std+0x68>)
 8003228:	6224      	str	r4, [r4, #32]
 800322a:	429c      	cmp	r4, r3
 800322c:	d006      	beq.n	800323c <std+0x48>
 800322e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003232:	4294      	cmp	r4, r2
 8003234:	d002      	beq.n	800323c <std+0x48>
 8003236:	33d0      	adds	r3, #208	@ 0xd0
 8003238:	429c      	cmp	r4, r3
 800323a:	d105      	bne.n	8003248 <std+0x54>
 800323c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003244:	f000 ba1a 	b.w	800367c <__retarget_lock_init_recursive>
 8003248:	bd10      	pop	{r4, pc}
 800324a:	bf00      	nop
 800324c:	08003505 	.word	0x08003505
 8003250:	08003527 	.word	0x08003527
 8003254:	0800355f 	.word	0x0800355f
 8003258:	08003583 	.word	0x08003583
 800325c:	2000012c 	.word	0x2000012c

08003260 <stdio_exit_handler>:
 8003260:	4a02      	ldr	r2, [pc, #8]	@ (800326c <stdio_exit_handler+0xc>)
 8003262:	4903      	ldr	r1, [pc, #12]	@ (8003270 <stdio_exit_handler+0x10>)
 8003264:	4803      	ldr	r0, [pc, #12]	@ (8003274 <stdio_exit_handler+0x14>)
 8003266:	f000 b869 	b.w	800333c <_fwalk_sglue>
 800326a:	bf00      	nop
 800326c:	2000000c 	.word	0x2000000c
 8003270:	08003f2d 	.word	0x08003f2d
 8003274:	2000001c 	.word	0x2000001c

08003278 <cleanup_stdio>:
 8003278:	6841      	ldr	r1, [r0, #4]
 800327a:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <cleanup_stdio+0x34>)
 800327c:	4299      	cmp	r1, r3
 800327e:	b510      	push	{r4, lr}
 8003280:	4604      	mov	r4, r0
 8003282:	d001      	beq.n	8003288 <cleanup_stdio+0x10>
 8003284:	f000 fe52 	bl	8003f2c <_fflush_r>
 8003288:	68a1      	ldr	r1, [r4, #8]
 800328a:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <cleanup_stdio+0x38>)
 800328c:	4299      	cmp	r1, r3
 800328e:	d002      	beq.n	8003296 <cleanup_stdio+0x1e>
 8003290:	4620      	mov	r0, r4
 8003292:	f000 fe4b 	bl	8003f2c <_fflush_r>
 8003296:	68e1      	ldr	r1, [r4, #12]
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <cleanup_stdio+0x3c>)
 800329a:	4299      	cmp	r1, r3
 800329c:	d004      	beq.n	80032a8 <cleanup_stdio+0x30>
 800329e:	4620      	mov	r0, r4
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a4:	f000 be42 	b.w	8003f2c <_fflush_r>
 80032a8:	bd10      	pop	{r4, pc}
 80032aa:	bf00      	nop
 80032ac:	2000012c 	.word	0x2000012c
 80032b0:	20000194 	.word	0x20000194
 80032b4:	200001fc 	.word	0x200001fc

080032b8 <global_stdio_init.part.0>:
 80032b8:	b510      	push	{r4, lr}
 80032ba:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <global_stdio_init.part.0+0x30>)
 80032bc:	4c0b      	ldr	r4, [pc, #44]	@ (80032ec <global_stdio_init.part.0+0x34>)
 80032be:	4a0c      	ldr	r2, [pc, #48]	@ (80032f0 <global_stdio_init.part.0+0x38>)
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	4620      	mov	r0, r4
 80032c4:	2200      	movs	r2, #0
 80032c6:	2104      	movs	r1, #4
 80032c8:	f7ff ff94 	bl	80031f4 <std>
 80032cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80032d0:	2201      	movs	r2, #1
 80032d2:	2109      	movs	r1, #9
 80032d4:	f7ff ff8e 	bl	80031f4 <std>
 80032d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032dc:	2202      	movs	r2, #2
 80032de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032e2:	2112      	movs	r1, #18
 80032e4:	f7ff bf86 	b.w	80031f4 <std>
 80032e8:	20000264 	.word	0x20000264
 80032ec:	2000012c 	.word	0x2000012c
 80032f0:	08003261 	.word	0x08003261

080032f4 <__sfp_lock_acquire>:
 80032f4:	4801      	ldr	r0, [pc, #4]	@ (80032fc <__sfp_lock_acquire+0x8>)
 80032f6:	f000 b9c2 	b.w	800367e <__retarget_lock_acquire_recursive>
 80032fa:	bf00      	nop
 80032fc:	2000026d 	.word	0x2000026d

08003300 <__sfp_lock_release>:
 8003300:	4801      	ldr	r0, [pc, #4]	@ (8003308 <__sfp_lock_release+0x8>)
 8003302:	f000 b9bd 	b.w	8003680 <__retarget_lock_release_recursive>
 8003306:	bf00      	nop
 8003308:	2000026d 	.word	0x2000026d

0800330c <__sinit>:
 800330c:	b510      	push	{r4, lr}
 800330e:	4604      	mov	r4, r0
 8003310:	f7ff fff0 	bl	80032f4 <__sfp_lock_acquire>
 8003314:	6a23      	ldr	r3, [r4, #32]
 8003316:	b11b      	cbz	r3, 8003320 <__sinit+0x14>
 8003318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800331c:	f7ff bff0 	b.w	8003300 <__sfp_lock_release>
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <__sinit+0x28>)
 8003322:	6223      	str	r3, [r4, #32]
 8003324:	4b04      	ldr	r3, [pc, #16]	@ (8003338 <__sinit+0x2c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f5      	bne.n	8003318 <__sinit+0xc>
 800332c:	f7ff ffc4 	bl	80032b8 <global_stdio_init.part.0>
 8003330:	e7f2      	b.n	8003318 <__sinit+0xc>
 8003332:	bf00      	nop
 8003334:	08003279 	.word	0x08003279
 8003338:	20000264 	.word	0x20000264

0800333c <_fwalk_sglue>:
 800333c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003340:	4607      	mov	r7, r0
 8003342:	4688      	mov	r8, r1
 8003344:	4614      	mov	r4, r2
 8003346:	2600      	movs	r6, #0
 8003348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800334c:	f1b9 0901 	subs.w	r9, r9, #1
 8003350:	d505      	bpl.n	800335e <_fwalk_sglue+0x22>
 8003352:	6824      	ldr	r4, [r4, #0]
 8003354:	2c00      	cmp	r4, #0
 8003356:	d1f7      	bne.n	8003348 <_fwalk_sglue+0xc>
 8003358:	4630      	mov	r0, r6
 800335a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800335e:	89ab      	ldrh	r3, [r5, #12]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d907      	bls.n	8003374 <_fwalk_sglue+0x38>
 8003364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003368:	3301      	adds	r3, #1
 800336a:	d003      	beq.n	8003374 <_fwalk_sglue+0x38>
 800336c:	4629      	mov	r1, r5
 800336e:	4638      	mov	r0, r7
 8003370:	47c0      	blx	r8
 8003372:	4306      	orrs	r6, r0
 8003374:	3568      	adds	r5, #104	@ 0x68
 8003376:	e7e9      	b.n	800334c <_fwalk_sglue+0x10>

08003378 <iprintf>:
 8003378:	b40f      	push	{r0, r1, r2, r3}
 800337a:	b507      	push	{r0, r1, r2, lr}
 800337c:	4906      	ldr	r1, [pc, #24]	@ (8003398 <iprintf+0x20>)
 800337e:	ab04      	add	r3, sp, #16
 8003380:	6808      	ldr	r0, [r1, #0]
 8003382:	f853 2b04 	ldr.w	r2, [r3], #4
 8003386:	6881      	ldr	r1, [r0, #8]
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	f000 faa5 	bl	80038d8 <_vfiprintf_r>
 800338e:	b003      	add	sp, #12
 8003390:	f85d eb04 	ldr.w	lr, [sp], #4
 8003394:	b004      	add	sp, #16
 8003396:	4770      	bx	lr
 8003398:	20000018 	.word	0x20000018

0800339c <setvbuf>:
 800339c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80033a0:	461d      	mov	r5, r3
 80033a2:	4b57      	ldr	r3, [pc, #348]	@ (8003500 <setvbuf+0x164>)
 80033a4:	681f      	ldr	r7, [r3, #0]
 80033a6:	4604      	mov	r4, r0
 80033a8:	460e      	mov	r6, r1
 80033aa:	4690      	mov	r8, r2
 80033ac:	b127      	cbz	r7, 80033b8 <setvbuf+0x1c>
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	b913      	cbnz	r3, 80033b8 <setvbuf+0x1c>
 80033b2:	4638      	mov	r0, r7
 80033b4:	f7ff ffaa 	bl	800330c <__sinit>
 80033b8:	f1b8 0f02 	cmp.w	r8, #2
 80033bc:	d006      	beq.n	80033cc <setvbuf+0x30>
 80033be:	f1b8 0f01 	cmp.w	r8, #1
 80033c2:	f200 809a 	bhi.w	80034fa <setvbuf+0x15e>
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	f2c0 8097 	blt.w	80034fa <setvbuf+0x15e>
 80033cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033ce:	07d9      	lsls	r1, r3, #31
 80033d0:	d405      	bmi.n	80033de <setvbuf+0x42>
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	059a      	lsls	r2, r3, #22
 80033d6:	d402      	bmi.n	80033de <setvbuf+0x42>
 80033d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033da:	f000 f950 	bl	800367e <__retarget_lock_acquire_recursive>
 80033de:	4621      	mov	r1, r4
 80033e0:	4638      	mov	r0, r7
 80033e2:	f000 fda3 	bl	8003f2c <_fflush_r>
 80033e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033e8:	b141      	cbz	r1, 80033fc <setvbuf+0x60>
 80033ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033ee:	4299      	cmp	r1, r3
 80033f0:	d002      	beq.n	80033f8 <setvbuf+0x5c>
 80033f2:	4638      	mov	r0, r7
 80033f4:	f000 f946 	bl	8003684 <_free_r>
 80033f8:	2300      	movs	r3, #0
 80033fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80033fc:	2300      	movs	r3, #0
 80033fe:	61a3      	str	r3, [r4, #24]
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	d503      	bpl.n	8003410 <setvbuf+0x74>
 8003408:	6921      	ldr	r1, [r4, #16]
 800340a:	4638      	mov	r0, r7
 800340c:	f000 f93a 	bl	8003684 <_free_r>
 8003410:	89a3      	ldrh	r3, [r4, #12]
 8003412:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	f1b8 0f02 	cmp.w	r8, #2
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	d061      	beq.n	80034e6 <setvbuf+0x14a>
 8003422:	ab01      	add	r3, sp, #4
 8003424:	466a      	mov	r2, sp
 8003426:	4621      	mov	r1, r4
 8003428:	4638      	mov	r0, r7
 800342a:	f000 fda7 	bl	8003f7c <__swhatbuf_r>
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	4318      	orrs	r0, r3
 8003432:	81a0      	strh	r0, [r4, #12]
 8003434:	bb2d      	cbnz	r5, 8003482 <setvbuf+0xe6>
 8003436:	9d00      	ldr	r5, [sp, #0]
 8003438:	4628      	mov	r0, r5
 800343a:	f000 f96d 	bl	8003718 <malloc>
 800343e:	4606      	mov	r6, r0
 8003440:	2800      	cmp	r0, #0
 8003442:	d152      	bne.n	80034ea <setvbuf+0x14e>
 8003444:	f8dd 9000 	ldr.w	r9, [sp]
 8003448:	45a9      	cmp	r9, r5
 800344a:	d140      	bne.n	80034ce <setvbuf+0x132>
 800344c:	f04f 35ff 	mov.w	r5, #4294967295
 8003450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003454:	f043 0202 	orr.w	r2, r3, #2
 8003458:	81a2      	strh	r2, [r4, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	60a2      	str	r2, [r4, #8]
 800345e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003462:	6022      	str	r2, [r4, #0]
 8003464:	6122      	str	r2, [r4, #16]
 8003466:	2201      	movs	r2, #1
 8003468:	6162      	str	r2, [r4, #20]
 800346a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800346c:	07d6      	lsls	r6, r2, #31
 800346e:	d404      	bmi.n	800347a <setvbuf+0xde>
 8003470:	0598      	lsls	r0, r3, #22
 8003472:	d402      	bmi.n	800347a <setvbuf+0xde>
 8003474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003476:	f000 f903 	bl	8003680 <__retarget_lock_release_recursive>
 800347a:	4628      	mov	r0, r5
 800347c:	b003      	add	sp, #12
 800347e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003482:	2e00      	cmp	r6, #0
 8003484:	d0d8      	beq.n	8003438 <setvbuf+0x9c>
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	b913      	cbnz	r3, 8003490 <setvbuf+0xf4>
 800348a:	4638      	mov	r0, r7
 800348c:	f7ff ff3e 	bl	800330c <__sinit>
 8003490:	f1b8 0f01 	cmp.w	r8, #1
 8003494:	bf08      	it	eq
 8003496:	89a3      	ldrheq	r3, [r4, #12]
 8003498:	6026      	str	r6, [r4, #0]
 800349a:	bf04      	itt	eq
 800349c:	f043 0301 	orreq.w	r3, r3, #1
 80034a0:	81a3      	strheq	r3, [r4, #12]
 80034a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a6:	f013 0208 	ands.w	r2, r3, #8
 80034aa:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80034ae:	d01e      	beq.n	80034ee <setvbuf+0x152>
 80034b0:	07d9      	lsls	r1, r3, #31
 80034b2:	bf41      	itttt	mi
 80034b4:	2200      	movmi	r2, #0
 80034b6:	426d      	negmi	r5, r5
 80034b8:	60a2      	strmi	r2, [r4, #8]
 80034ba:	61a5      	strmi	r5, [r4, #24]
 80034bc:	bf58      	it	pl
 80034be:	60a5      	strpl	r5, [r4, #8]
 80034c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80034c2:	07d2      	lsls	r2, r2, #31
 80034c4:	d401      	bmi.n	80034ca <setvbuf+0x12e>
 80034c6:	059b      	lsls	r3, r3, #22
 80034c8:	d513      	bpl.n	80034f2 <setvbuf+0x156>
 80034ca:	2500      	movs	r5, #0
 80034cc:	e7d5      	b.n	800347a <setvbuf+0xde>
 80034ce:	4648      	mov	r0, r9
 80034d0:	f000 f922 	bl	8003718 <malloc>
 80034d4:	4606      	mov	r6, r0
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d0b8      	beq.n	800344c <setvbuf+0xb0>
 80034da:	89a3      	ldrh	r3, [r4, #12]
 80034dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e0:	81a3      	strh	r3, [r4, #12]
 80034e2:	464d      	mov	r5, r9
 80034e4:	e7cf      	b.n	8003486 <setvbuf+0xea>
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7b2      	b.n	8003450 <setvbuf+0xb4>
 80034ea:	46a9      	mov	r9, r5
 80034ec:	e7f5      	b.n	80034da <setvbuf+0x13e>
 80034ee:	60a2      	str	r2, [r4, #8]
 80034f0:	e7e6      	b.n	80034c0 <setvbuf+0x124>
 80034f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034f4:	f000 f8c4 	bl	8003680 <__retarget_lock_release_recursive>
 80034f8:	e7e7      	b.n	80034ca <setvbuf+0x12e>
 80034fa:	f04f 35ff 	mov.w	r5, #4294967295
 80034fe:	e7bc      	b.n	800347a <setvbuf+0xde>
 8003500:	20000018 	.word	0x20000018

08003504 <__sread>:
 8003504:	b510      	push	{r4, lr}
 8003506:	460c      	mov	r4, r1
 8003508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800350c:	f000 f868 	bl	80035e0 <_read_r>
 8003510:	2800      	cmp	r0, #0
 8003512:	bfab      	itete	ge
 8003514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003516:	89a3      	ldrhlt	r3, [r4, #12]
 8003518:	181b      	addge	r3, r3, r0
 800351a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800351e:	bfac      	ite	ge
 8003520:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003522:	81a3      	strhlt	r3, [r4, #12]
 8003524:	bd10      	pop	{r4, pc}

08003526 <__swrite>:
 8003526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352a:	461f      	mov	r7, r3
 800352c:	898b      	ldrh	r3, [r1, #12]
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	4605      	mov	r5, r0
 8003532:	460c      	mov	r4, r1
 8003534:	4616      	mov	r6, r2
 8003536:	d505      	bpl.n	8003544 <__swrite+0x1e>
 8003538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800353c:	2302      	movs	r3, #2
 800353e:	2200      	movs	r2, #0
 8003540:	f000 f83c 	bl	80035bc <_lseek_r>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800354a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	4632      	mov	r2, r6
 8003552:	463b      	mov	r3, r7
 8003554:	4628      	mov	r0, r5
 8003556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800355a:	f000 b853 	b.w	8003604 <_write_r>

0800355e <__sseek>:
 800355e:	b510      	push	{r4, lr}
 8003560:	460c      	mov	r4, r1
 8003562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003566:	f000 f829 	bl	80035bc <_lseek_r>
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	bf15      	itete	ne
 8003570:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800357a:	81a3      	strheq	r3, [r4, #12]
 800357c:	bf18      	it	ne
 800357e:	81a3      	strhne	r3, [r4, #12]
 8003580:	bd10      	pop	{r4, pc}

08003582 <__sclose>:
 8003582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003586:	f000 b809 	b.w	800359c <_close_r>

0800358a <memset>:
 800358a:	4402      	add	r2, r0
 800358c:	4603      	mov	r3, r0
 800358e:	4293      	cmp	r3, r2
 8003590:	d100      	bne.n	8003594 <memset+0xa>
 8003592:	4770      	bx	lr
 8003594:	f803 1b01 	strb.w	r1, [r3], #1
 8003598:	e7f9      	b.n	800358e <memset+0x4>
	...

0800359c <_close_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4d06      	ldr	r5, [pc, #24]	@ (80035b8 <_close_r+0x1c>)
 80035a0:	2300      	movs	r3, #0
 80035a2:	4604      	mov	r4, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	f7fd fb62 	bl	8000c70 <_close>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_close_r+0x1a>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_close_r+0x1a>
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	20000268 	.word	0x20000268

080035bc <_lseek_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	4d07      	ldr	r5, [pc, #28]	@ (80035dc <_lseek_r+0x20>)
 80035c0:	4604      	mov	r4, r0
 80035c2:	4608      	mov	r0, r1
 80035c4:	4611      	mov	r1, r2
 80035c6:	2200      	movs	r2, #0
 80035c8:	602a      	str	r2, [r5, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f7fd fb77 	bl	8000cbe <_lseek>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_lseek_r+0x1e>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_lseek_r+0x1e>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	20000268 	.word	0x20000268

080035e0 <_read_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4d07      	ldr	r5, [pc, #28]	@ (8003600 <_read_r+0x20>)
 80035e4:	4604      	mov	r4, r0
 80035e6:	4608      	mov	r0, r1
 80035e8:	4611      	mov	r1, r2
 80035ea:	2200      	movs	r2, #0
 80035ec:	602a      	str	r2, [r5, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f7fd fb21 	bl	8000c36 <_read>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d102      	bne.n	80035fe <_read_r+0x1e>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	b103      	cbz	r3, 80035fe <_read_r+0x1e>
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	20000268 	.word	0x20000268

08003604 <_write_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4d07      	ldr	r5, [pc, #28]	@ (8003624 <_write_r+0x20>)
 8003608:	4604      	mov	r4, r0
 800360a:	4608      	mov	r0, r1
 800360c:	4611      	mov	r1, r2
 800360e:	2200      	movs	r2, #0
 8003610:	602a      	str	r2, [r5, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	f7fd fa02 	bl	8000a1c <_write>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_write_r+0x1e>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_write_r+0x1e>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	20000268 	.word	0x20000268

08003628 <__errno>:
 8003628:	4b01      	ldr	r3, [pc, #4]	@ (8003630 <__errno+0x8>)
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000018 	.word	0x20000018

08003634 <__libc_init_array>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	4d0d      	ldr	r5, [pc, #52]	@ (800366c <__libc_init_array+0x38>)
 8003638:	4c0d      	ldr	r4, [pc, #52]	@ (8003670 <__libc_init_array+0x3c>)
 800363a:	1b64      	subs	r4, r4, r5
 800363c:	10a4      	asrs	r4, r4, #2
 800363e:	2600      	movs	r6, #0
 8003640:	42a6      	cmp	r6, r4
 8003642:	d109      	bne.n	8003658 <__libc_init_array+0x24>
 8003644:	4d0b      	ldr	r5, [pc, #44]	@ (8003674 <__libc_init_array+0x40>)
 8003646:	4c0c      	ldr	r4, [pc, #48]	@ (8003678 <__libc_init_array+0x44>)
 8003648:	f000 fdc0 	bl	80041cc <_init>
 800364c:	1b64      	subs	r4, r4, r5
 800364e:	10a4      	asrs	r4, r4, #2
 8003650:	2600      	movs	r6, #0
 8003652:	42a6      	cmp	r6, r4
 8003654:	d105      	bne.n	8003662 <__libc_init_array+0x2e>
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	f855 3b04 	ldr.w	r3, [r5], #4
 800365c:	4798      	blx	r3
 800365e:	3601      	adds	r6, #1
 8003660:	e7ee      	b.n	8003640 <__libc_init_array+0xc>
 8003662:	f855 3b04 	ldr.w	r3, [r5], #4
 8003666:	4798      	blx	r3
 8003668:	3601      	adds	r6, #1
 800366a:	e7f2      	b.n	8003652 <__libc_init_array+0x1e>
 800366c:	0800432c 	.word	0x0800432c
 8003670:	0800432c 	.word	0x0800432c
 8003674:	0800432c 	.word	0x0800432c
 8003678:	08004330 	.word	0x08004330

0800367c <__retarget_lock_init_recursive>:
 800367c:	4770      	bx	lr

0800367e <__retarget_lock_acquire_recursive>:
 800367e:	4770      	bx	lr

08003680 <__retarget_lock_release_recursive>:
 8003680:	4770      	bx	lr
	...

08003684 <_free_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4605      	mov	r5, r0
 8003688:	2900      	cmp	r1, #0
 800368a:	d041      	beq.n	8003710 <_free_r+0x8c>
 800368c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003690:	1f0c      	subs	r4, r1, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	bfb8      	it	lt
 8003696:	18e4      	addlt	r4, r4, r3
 8003698:	f000 f8e8 	bl	800386c <__malloc_lock>
 800369c:	4a1d      	ldr	r2, [pc, #116]	@ (8003714 <_free_r+0x90>)
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	b933      	cbnz	r3, 80036b0 <_free_r+0x2c>
 80036a2:	6063      	str	r3, [r4, #4]
 80036a4:	6014      	str	r4, [r2, #0]
 80036a6:	4628      	mov	r0, r5
 80036a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036ac:	f000 b8e4 	b.w	8003878 <__malloc_unlock>
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	d908      	bls.n	80036c6 <_free_r+0x42>
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	1821      	adds	r1, r4, r0
 80036b8:	428b      	cmp	r3, r1
 80036ba:	bf01      	itttt	eq
 80036bc:	6819      	ldreq	r1, [r3, #0]
 80036be:	685b      	ldreq	r3, [r3, #4]
 80036c0:	1809      	addeq	r1, r1, r0
 80036c2:	6021      	streq	r1, [r4, #0]
 80036c4:	e7ed      	b.n	80036a2 <_free_r+0x1e>
 80036c6:	461a      	mov	r2, r3
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	b10b      	cbz	r3, 80036d0 <_free_r+0x4c>
 80036cc:	42a3      	cmp	r3, r4
 80036ce:	d9fa      	bls.n	80036c6 <_free_r+0x42>
 80036d0:	6811      	ldr	r1, [r2, #0]
 80036d2:	1850      	adds	r0, r2, r1
 80036d4:	42a0      	cmp	r0, r4
 80036d6:	d10b      	bne.n	80036f0 <_free_r+0x6c>
 80036d8:	6820      	ldr	r0, [r4, #0]
 80036da:	4401      	add	r1, r0
 80036dc:	1850      	adds	r0, r2, r1
 80036de:	4283      	cmp	r3, r0
 80036e0:	6011      	str	r1, [r2, #0]
 80036e2:	d1e0      	bne.n	80036a6 <_free_r+0x22>
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	6053      	str	r3, [r2, #4]
 80036ea:	4408      	add	r0, r1
 80036ec:	6010      	str	r0, [r2, #0]
 80036ee:	e7da      	b.n	80036a6 <_free_r+0x22>
 80036f0:	d902      	bls.n	80036f8 <_free_r+0x74>
 80036f2:	230c      	movs	r3, #12
 80036f4:	602b      	str	r3, [r5, #0]
 80036f6:	e7d6      	b.n	80036a6 <_free_r+0x22>
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	1821      	adds	r1, r4, r0
 80036fc:	428b      	cmp	r3, r1
 80036fe:	bf04      	itt	eq
 8003700:	6819      	ldreq	r1, [r3, #0]
 8003702:	685b      	ldreq	r3, [r3, #4]
 8003704:	6063      	str	r3, [r4, #4]
 8003706:	bf04      	itt	eq
 8003708:	1809      	addeq	r1, r1, r0
 800370a:	6021      	streq	r1, [r4, #0]
 800370c:	6054      	str	r4, [r2, #4]
 800370e:	e7ca      	b.n	80036a6 <_free_r+0x22>
 8003710:	bd38      	pop	{r3, r4, r5, pc}
 8003712:	bf00      	nop
 8003714:	20000274 	.word	0x20000274

08003718 <malloc>:
 8003718:	4b02      	ldr	r3, [pc, #8]	@ (8003724 <malloc+0xc>)
 800371a:	4601      	mov	r1, r0
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	f000 b825 	b.w	800376c <_malloc_r>
 8003722:	bf00      	nop
 8003724:	20000018 	.word	0x20000018

08003728 <sbrk_aligned>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	4e0f      	ldr	r6, [pc, #60]	@ (8003768 <sbrk_aligned+0x40>)
 800372c:	460c      	mov	r4, r1
 800372e:	6831      	ldr	r1, [r6, #0]
 8003730:	4605      	mov	r5, r0
 8003732:	b911      	cbnz	r1, 800373a <sbrk_aligned+0x12>
 8003734:	f000 fd3a 	bl	80041ac <_sbrk_r>
 8003738:	6030      	str	r0, [r6, #0]
 800373a:	4621      	mov	r1, r4
 800373c:	4628      	mov	r0, r5
 800373e:	f000 fd35 	bl	80041ac <_sbrk_r>
 8003742:	1c43      	adds	r3, r0, #1
 8003744:	d103      	bne.n	800374e <sbrk_aligned+0x26>
 8003746:	f04f 34ff 	mov.w	r4, #4294967295
 800374a:	4620      	mov	r0, r4
 800374c:	bd70      	pop	{r4, r5, r6, pc}
 800374e:	1cc4      	adds	r4, r0, #3
 8003750:	f024 0403 	bic.w	r4, r4, #3
 8003754:	42a0      	cmp	r0, r4
 8003756:	d0f8      	beq.n	800374a <sbrk_aligned+0x22>
 8003758:	1a21      	subs	r1, r4, r0
 800375a:	4628      	mov	r0, r5
 800375c:	f000 fd26 	bl	80041ac <_sbrk_r>
 8003760:	3001      	adds	r0, #1
 8003762:	d1f2      	bne.n	800374a <sbrk_aligned+0x22>
 8003764:	e7ef      	b.n	8003746 <sbrk_aligned+0x1e>
 8003766:	bf00      	nop
 8003768:	20000270 	.word	0x20000270

0800376c <_malloc_r>:
 800376c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003770:	1ccd      	adds	r5, r1, #3
 8003772:	f025 0503 	bic.w	r5, r5, #3
 8003776:	3508      	adds	r5, #8
 8003778:	2d0c      	cmp	r5, #12
 800377a:	bf38      	it	cc
 800377c:	250c      	movcc	r5, #12
 800377e:	2d00      	cmp	r5, #0
 8003780:	4606      	mov	r6, r0
 8003782:	db01      	blt.n	8003788 <_malloc_r+0x1c>
 8003784:	42a9      	cmp	r1, r5
 8003786:	d904      	bls.n	8003792 <_malloc_r+0x26>
 8003788:	230c      	movs	r3, #12
 800378a:	6033      	str	r3, [r6, #0]
 800378c:	2000      	movs	r0, #0
 800378e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003868 <_malloc_r+0xfc>
 8003796:	f000 f869 	bl	800386c <__malloc_lock>
 800379a:	f8d8 3000 	ldr.w	r3, [r8]
 800379e:	461c      	mov	r4, r3
 80037a0:	bb44      	cbnz	r4, 80037f4 <_malloc_r+0x88>
 80037a2:	4629      	mov	r1, r5
 80037a4:	4630      	mov	r0, r6
 80037a6:	f7ff ffbf 	bl	8003728 <sbrk_aligned>
 80037aa:	1c43      	adds	r3, r0, #1
 80037ac:	4604      	mov	r4, r0
 80037ae:	d158      	bne.n	8003862 <_malloc_r+0xf6>
 80037b0:	f8d8 4000 	ldr.w	r4, [r8]
 80037b4:	4627      	mov	r7, r4
 80037b6:	2f00      	cmp	r7, #0
 80037b8:	d143      	bne.n	8003842 <_malloc_r+0xd6>
 80037ba:	2c00      	cmp	r4, #0
 80037bc:	d04b      	beq.n	8003856 <_malloc_r+0xea>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	4639      	mov	r1, r7
 80037c2:	4630      	mov	r0, r6
 80037c4:	eb04 0903 	add.w	r9, r4, r3
 80037c8:	f000 fcf0 	bl	80041ac <_sbrk_r>
 80037cc:	4581      	cmp	r9, r0
 80037ce:	d142      	bne.n	8003856 <_malloc_r+0xea>
 80037d0:	6821      	ldr	r1, [r4, #0]
 80037d2:	1a6d      	subs	r5, r5, r1
 80037d4:	4629      	mov	r1, r5
 80037d6:	4630      	mov	r0, r6
 80037d8:	f7ff ffa6 	bl	8003728 <sbrk_aligned>
 80037dc:	3001      	adds	r0, #1
 80037de:	d03a      	beq.n	8003856 <_malloc_r+0xea>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	442b      	add	r3, r5
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	f8d8 3000 	ldr.w	r3, [r8]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	bb62      	cbnz	r2, 8003848 <_malloc_r+0xdc>
 80037ee:	f8c8 7000 	str.w	r7, [r8]
 80037f2:	e00f      	b.n	8003814 <_malloc_r+0xa8>
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	1b52      	subs	r2, r2, r5
 80037f8:	d420      	bmi.n	800383c <_malloc_r+0xd0>
 80037fa:	2a0b      	cmp	r2, #11
 80037fc:	d917      	bls.n	800382e <_malloc_r+0xc2>
 80037fe:	1961      	adds	r1, r4, r5
 8003800:	42a3      	cmp	r3, r4
 8003802:	6025      	str	r5, [r4, #0]
 8003804:	bf18      	it	ne
 8003806:	6059      	strne	r1, [r3, #4]
 8003808:	6863      	ldr	r3, [r4, #4]
 800380a:	bf08      	it	eq
 800380c:	f8c8 1000 	streq.w	r1, [r8]
 8003810:	5162      	str	r2, [r4, r5]
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	4630      	mov	r0, r6
 8003816:	f000 f82f 	bl	8003878 <__malloc_unlock>
 800381a:	f104 000b 	add.w	r0, r4, #11
 800381e:	1d23      	adds	r3, r4, #4
 8003820:	f020 0007 	bic.w	r0, r0, #7
 8003824:	1ac2      	subs	r2, r0, r3
 8003826:	bf1c      	itt	ne
 8003828:	1a1b      	subne	r3, r3, r0
 800382a:	50a3      	strne	r3, [r4, r2]
 800382c:	e7af      	b.n	800378e <_malloc_r+0x22>
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	42a3      	cmp	r3, r4
 8003832:	bf0c      	ite	eq
 8003834:	f8c8 2000 	streq.w	r2, [r8]
 8003838:	605a      	strne	r2, [r3, #4]
 800383a:	e7eb      	b.n	8003814 <_malloc_r+0xa8>
 800383c:	4623      	mov	r3, r4
 800383e:	6864      	ldr	r4, [r4, #4]
 8003840:	e7ae      	b.n	80037a0 <_malloc_r+0x34>
 8003842:	463c      	mov	r4, r7
 8003844:	687f      	ldr	r7, [r7, #4]
 8003846:	e7b6      	b.n	80037b6 <_malloc_r+0x4a>
 8003848:	461a      	mov	r2, r3
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	42a3      	cmp	r3, r4
 800384e:	d1fb      	bne.n	8003848 <_malloc_r+0xdc>
 8003850:	2300      	movs	r3, #0
 8003852:	6053      	str	r3, [r2, #4]
 8003854:	e7de      	b.n	8003814 <_malloc_r+0xa8>
 8003856:	230c      	movs	r3, #12
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	4630      	mov	r0, r6
 800385c:	f000 f80c 	bl	8003878 <__malloc_unlock>
 8003860:	e794      	b.n	800378c <_malloc_r+0x20>
 8003862:	6005      	str	r5, [r0, #0]
 8003864:	e7d6      	b.n	8003814 <_malloc_r+0xa8>
 8003866:	bf00      	nop
 8003868:	20000274 	.word	0x20000274

0800386c <__malloc_lock>:
 800386c:	4801      	ldr	r0, [pc, #4]	@ (8003874 <__malloc_lock+0x8>)
 800386e:	f7ff bf06 	b.w	800367e <__retarget_lock_acquire_recursive>
 8003872:	bf00      	nop
 8003874:	2000026c 	.word	0x2000026c

08003878 <__malloc_unlock>:
 8003878:	4801      	ldr	r0, [pc, #4]	@ (8003880 <__malloc_unlock+0x8>)
 800387a:	f7ff bf01 	b.w	8003680 <__retarget_lock_release_recursive>
 800387e:	bf00      	nop
 8003880:	2000026c 	.word	0x2000026c

08003884 <__sfputc_r>:
 8003884:	6893      	ldr	r3, [r2, #8]
 8003886:	3b01      	subs	r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	b410      	push	{r4}
 800388c:	6093      	str	r3, [r2, #8]
 800388e:	da08      	bge.n	80038a2 <__sfputc_r+0x1e>
 8003890:	6994      	ldr	r4, [r2, #24]
 8003892:	42a3      	cmp	r3, r4
 8003894:	db01      	blt.n	800389a <__sfputc_r+0x16>
 8003896:	290a      	cmp	r1, #10
 8003898:	d103      	bne.n	80038a2 <__sfputc_r+0x1e>
 800389a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800389e:	f000 bbcf 	b.w	8004040 <__swbuf_r>
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	1c58      	adds	r0, r3, #1
 80038a6:	6010      	str	r0, [r2, #0]
 80038a8:	7019      	strb	r1, [r3, #0]
 80038aa:	4608      	mov	r0, r1
 80038ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <__sfputs_r>:
 80038b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b4:	4606      	mov	r6, r0
 80038b6:	460f      	mov	r7, r1
 80038b8:	4614      	mov	r4, r2
 80038ba:	18d5      	adds	r5, r2, r3
 80038bc:	42ac      	cmp	r4, r5
 80038be:	d101      	bne.n	80038c4 <__sfputs_r+0x12>
 80038c0:	2000      	movs	r0, #0
 80038c2:	e007      	b.n	80038d4 <__sfputs_r+0x22>
 80038c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038c8:	463a      	mov	r2, r7
 80038ca:	4630      	mov	r0, r6
 80038cc:	f7ff ffda 	bl	8003884 <__sfputc_r>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d1f3      	bne.n	80038bc <__sfputs_r+0xa>
 80038d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038d8 <_vfiprintf_r>:
 80038d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038dc:	460d      	mov	r5, r1
 80038de:	b09d      	sub	sp, #116	@ 0x74
 80038e0:	4614      	mov	r4, r2
 80038e2:	4698      	mov	r8, r3
 80038e4:	4606      	mov	r6, r0
 80038e6:	b118      	cbz	r0, 80038f0 <_vfiprintf_r+0x18>
 80038e8:	6a03      	ldr	r3, [r0, #32]
 80038ea:	b90b      	cbnz	r3, 80038f0 <_vfiprintf_r+0x18>
 80038ec:	f7ff fd0e 	bl	800330c <__sinit>
 80038f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038f2:	07d9      	lsls	r1, r3, #31
 80038f4:	d405      	bmi.n	8003902 <_vfiprintf_r+0x2a>
 80038f6:	89ab      	ldrh	r3, [r5, #12]
 80038f8:	059a      	lsls	r2, r3, #22
 80038fa:	d402      	bmi.n	8003902 <_vfiprintf_r+0x2a>
 80038fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038fe:	f7ff febe 	bl	800367e <__retarget_lock_acquire_recursive>
 8003902:	89ab      	ldrh	r3, [r5, #12]
 8003904:	071b      	lsls	r3, r3, #28
 8003906:	d501      	bpl.n	800390c <_vfiprintf_r+0x34>
 8003908:	692b      	ldr	r3, [r5, #16]
 800390a:	b99b      	cbnz	r3, 8003934 <_vfiprintf_r+0x5c>
 800390c:	4629      	mov	r1, r5
 800390e:	4630      	mov	r0, r6
 8003910:	f000 fbd4 	bl	80040bc <__swsetup_r>
 8003914:	b170      	cbz	r0, 8003934 <_vfiprintf_r+0x5c>
 8003916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003918:	07dc      	lsls	r4, r3, #31
 800391a:	d504      	bpl.n	8003926 <_vfiprintf_r+0x4e>
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	b01d      	add	sp, #116	@ 0x74
 8003922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003926:	89ab      	ldrh	r3, [r5, #12]
 8003928:	0598      	lsls	r0, r3, #22
 800392a:	d4f7      	bmi.n	800391c <_vfiprintf_r+0x44>
 800392c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800392e:	f7ff fea7 	bl	8003680 <__retarget_lock_release_recursive>
 8003932:	e7f3      	b.n	800391c <_vfiprintf_r+0x44>
 8003934:	2300      	movs	r3, #0
 8003936:	9309      	str	r3, [sp, #36]	@ 0x24
 8003938:	2320      	movs	r3, #32
 800393a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800393e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003942:	2330      	movs	r3, #48	@ 0x30
 8003944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003af4 <_vfiprintf_r+0x21c>
 8003948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800394c:	f04f 0901 	mov.w	r9, #1
 8003950:	4623      	mov	r3, r4
 8003952:	469a      	mov	sl, r3
 8003954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003958:	b10a      	cbz	r2, 800395e <_vfiprintf_r+0x86>
 800395a:	2a25      	cmp	r2, #37	@ 0x25
 800395c:	d1f9      	bne.n	8003952 <_vfiprintf_r+0x7a>
 800395e:	ebba 0b04 	subs.w	fp, sl, r4
 8003962:	d00b      	beq.n	800397c <_vfiprintf_r+0xa4>
 8003964:	465b      	mov	r3, fp
 8003966:	4622      	mov	r2, r4
 8003968:	4629      	mov	r1, r5
 800396a:	4630      	mov	r0, r6
 800396c:	f7ff ffa1 	bl	80038b2 <__sfputs_r>
 8003970:	3001      	adds	r0, #1
 8003972:	f000 80a7 	beq.w	8003ac4 <_vfiprintf_r+0x1ec>
 8003976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003978:	445a      	add	r2, fp
 800397a:	9209      	str	r2, [sp, #36]	@ 0x24
 800397c:	f89a 3000 	ldrb.w	r3, [sl]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 809f 	beq.w	8003ac4 <_vfiprintf_r+0x1ec>
 8003986:	2300      	movs	r3, #0
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003990:	f10a 0a01 	add.w	sl, sl, #1
 8003994:	9304      	str	r3, [sp, #16]
 8003996:	9307      	str	r3, [sp, #28]
 8003998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800399c:	931a      	str	r3, [sp, #104]	@ 0x68
 800399e:	4654      	mov	r4, sl
 80039a0:	2205      	movs	r2, #5
 80039a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a6:	4853      	ldr	r0, [pc, #332]	@ (8003af4 <_vfiprintf_r+0x21c>)
 80039a8:	f7fc fc12 	bl	80001d0 <memchr>
 80039ac:	9a04      	ldr	r2, [sp, #16]
 80039ae:	b9d8      	cbnz	r0, 80039e8 <_vfiprintf_r+0x110>
 80039b0:	06d1      	lsls	r1, r2, #27
 80039b2:	bf44      	itt	mi
 80039b4:	2320      	movmi	r3, #32
 80039b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039ba:	0713      	lsls	r3, r2, #28
 80039bc:	bf44      	itt	mi
 80039be:	232b      	movmi	r3, #43	@ 0x2b
 80039c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039c4:	f89a 3000 	ldrb.w	r3, [sl]
 80039c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80039ca:	d015      	beq.n	80039f8 <_vfiprintf_r+0x120>
 80039cc:	9a07      	ldr	r2, [sp, #28]
 80039ce:	4654      	mov	r4, sl
 80039d0:	2000      	movs	r0, #0
 80039d2:	f04f 0c0a 	mov.w	ip, #10
 80039d6:	4621      	mov	r1, r4
 80039d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039dc:	3b30      	subs	r3, #48	@ 0x30
 80039de:	2b09      	cmp	r3, #9
 80039e0:	d94b      	bls.n	8003a7a <_vfiprintf_r+0x1a2>
 80039e2:	b1b0      	cbz	r0, 8003a12 <_vfiprintf_r+0x13a>
 80039e4:	9207      	str	r2, [sp, #28]
 80039e6:	e014      	b.n	8003a12 <_vfiprintf_r+0x13a>
 80039e8:	eba0 0308 	sub.w	r3, r0, r8
 80039ec:	fa09 f303 	lsl.w	r3, r9, r3
 80039f0:	4313      	orrs	r3, r2
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	46a2      	mov	sl, r4
 80039f6:	e7d2      	b.n	800399e <_vfiprintf_r+0xc6>
 80039f8:	9b03      	ldr	r3, [sp, #12]
 80039fa:	1d19      	adds	r1, r3, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	9103      	str	r1, [sp, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bfbb      	ittet	lt
 8003a04:	425b      	neglt	r3, r3
 8003a06:	f042 0202 	orrlt.w	r2, r2, #2
 8003a0a:	9307      	strge	r3, [sp, #28]
 8003a0c:	9307      	strlt	r3, [sp, #28]
 8003a0e:	bfb8      	it	lt
 8003a10:	9204      	strlt	r2, [sp, #16]
 8003a12:	7823      	ldrb	r3, [r4, #0]
 8003a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a16:	d10a      	bne.n	8003a2e <_vfiprintf_r+0x156>
 8003a18:	7863      	ldrb	r3, [r4, #1]
 8003a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a1c:	d132      	bne.n	8003a84 <_vfiprintf_r+0x1ac>
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	1d1a      	adds	r2, r3, #4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	9203      	str	r2, [sp, #12]
 8003a26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a2a:	3402      	adds	r4, #2
 8003a2c:	9305      	str	r3, [sp, #20]
 8003a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003b04 <_vfiprintf_r+0x22c>
 8003a32:	7821      	ldrb	r1, [r4, #0]
 8003a34:	2203      	movs	r2, #3
 8003a36:	4650      	mov	r0, sl
 8003a38:	f7fc fbca 	bl	80001d0 <memchr>
 8003a3c:	b138      	cbz	r0, 8003a4e <_vfiprintf_r+0x176>
 8003a3e:	9b04      	ldr	r3, [sp, #16]
 8003a40:	eba0 000a 	sub.w	r0, r0, sl
 8003a44:	2240      	movs	r2, #64	@ 0x40
 8003a46:	4082      	lsls	r2, r0
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	3401      	adds	r4, #1
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a52:	4829      	ldr	r0, [pc, #164]	@ (8003af8 <_vfiprintf_r+0x220>)
 8003a54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a58:	2206      	movs	r2, #6
 8003a5a:	f7fc fbb9 	bl	80001d0 <memchr>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d03f      	beq.n	8003ae2 <_vfiprintf_r+0x20a>
 8003a62:	4b26      	ldr	r3, [pc, #152]	@ (8003afc <_vfiprintf_r+0x224>)
 8003a64:	bb1b      	cbnz	r3, 8003aae <_vfiprintf_r+0x1d6>
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	3307      	adds	r3, #7
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	3308      	adds	r3, #8
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a74:	443b      	add	r3, r7
 8003a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a78:	e76a      	b.n	8003950 <_vfiprintf_r+0x78>
 8003a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a7e:	460c      	mov	r4, r1
 8003a80:	2001      	movs	r0, #1
 8003a82:	e7a8      	b.n	80039d6 <_vfiprintf_r+0xfe>
 8003a84:	2300      	movs	r3, #0
 8003a86:	3401      	adds	r4, #1
 8003a88:	9305      	str	r3, [sp, #20]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f04f 0c0a 	mov.w	ip, #10
 8003a90:	4620      	mov	r0, r4
 8003a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a96:	3a30      	subs	r2, #48	@ 0x30
 8003a98:	2a09      	cmp	r2, #9
 8003a9a:	d903      	bls.n	8003aa4 <_vfiprintf_r+0x1cc>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0c6      	beq.n	8003a2e <_vfiprintf_r+0x156>
 8003aa0:	9105      	str	r1, [sp, #20]
 8003aa2:	e7c4      	b.n	8003a2e <_vfiprintf_r+0x156>
 8003aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e7f0      	b.n	8003a90 <_vfiprintf_r+0x1b8>
 8003aae:	ab03      	add	r3, sp, #12
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	462a      	mov	r2, r5
 8003ab4:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <_vfiprintf_r+0x228>)
 8003ab6:	a904      	add	r1, sp, #16
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f3af 8000 	nop.w
 8003abe:	4607      	mov	r7, r0
 8003ac0:	1c78      	adds	r0, r7, #1
 8003ac2:	d1d6      	bne.n	8003a72 <_vfiprintf_r+0x19a>
 8003ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ac6:	07d9      	lsls	r1, r3, #31
 8003ac8:	d405      	bmi.n	8003ad6 <_vfiprintf_r+0x1fe>
 8003aca:	89ab      	ldrh	r3, [r5, #12]
 8003acc:	059a      	lsls	r2, r3, #22
 8003ace:	d402      	bmi.n	8003ad6 <_vfiprintf_r+0x1fe>
 8003ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ad2:	f7ff fdd5 	bl	8003680 <__retarget_lock_release_recursive>
 8003ad6:	89ab      	ldrh	r3, [r5, #12]
 8003ad8:	065b      	lsls	r3, r3, #25
 8003ada:	f53f af1f 	bmi.w	800391c <_vfiprintf_r+0x44>
 8003ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ae0:	e71e      	b.n	8003920 <_vfiprintf_r+0x48>
 8003ae2:	ab03      	add	r3, sp, #12
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	462a      	mov	r2, r5
 8003ae8:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <_vfiprintf_r+0x228>)
 8003aea:	a904      	add	r1, sp, #16
 8003aec:	4630      	mov	r0, r6
 8003aee:	f000 f879 	bl	8003be4 <_printf_i>
 8003af2:	e7e4      	b.n	8003abe <_vfiprintf_r+0x1e6>
 8003af4:	080042f0 	.word	0x080042f0
 8003af8:	080042fa 	.word	0x080042fa
 8003afc:	00000000 	.word	0x00000000
 8003b00:	080038b3 	.word	0x080038b3
 8003b04:	080042f6 	.word	0x080042f6

08003b08 <_printf_common>:
 8003b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	4616      	mov	r6, r2
 8003b0e:	4698      	mov	r8, r3
 8003b10:	688a      	ldr	r2, [r1, #8]
 8003b12:	690b      	ldr	r3, [r1, #16]
 8003b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bfb8      	it	lt
 8003b1c:	4613      	movlt	r3, r2
 8003b1e:	6033      	str	r3, [r6, #0]
 8003b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b24:	4607      	mov	r7, r0
 8003b26:	460c      	mov	r4, r1
 8003b28:	b10a      	cbz	r2, 8003b2e <_printf_common+0x26>
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	0699      	lsls	r1, r3, #26
 8003b32:	bf42      	ittt	mi
 8003b34:	6833      	ldrmi	r3, [r6, #0]
 8003b36:	3302      	addmi	r3, #2
 8003b38:	6033      	strmi	r3, [r6, #0]
 8003b3a:	6825      	ldr	r5, [r4, #0]
 8003b3c:	f015 0506 	ands.w	r5, r5, #6
 8003b40:	d106      	bne.n	8003b50 <_printf_common+0x48>
 8003b42:	f104 0a19 	add.w	sl, r4, #25
 8003b46:	68e3      	ldr	r3, [r4, #12]
 8003b48:	6832      	ldr	r2, [r6, #0]
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	dc26      	bgt.n	8003b9e <_printf_common+0x96>
 8003b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b54:	6822      	ldr	r2, [r4, #0]
 8003b56:	3b00      	subs	r3, #0
 8003b58:	bf18      	it	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	0692      	lsls	r2, r2, #26
 8003b5e:	d42b      	bmi.n	8003bb8 <_printf_common+0xb0>
 8003b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b64:	4641      	mov	r1, r8
 8003b66:	4638      	mov	r0, r7
 8003b68:	47c8      	blx	r9
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d01e      	beq.n	8003bac <_printf_common+0xa4>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	6922      	ldr	r2, [r4, #16]
 8003b72:	f003 0306 	and.w	r3, r3, #6
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	bf02      	ittt	eq
 8003b7a:	68e5      	ldreq	r5, [r4, #12]
 8003b7c:	6833      	ldreq	r3, [r6, #0]
 8003b7e:	1aed      	subeq	r5, r5, r3
 8003b80:	68a3      	ldr	r3, [r4, #8]
 8003b82:	bf0c      	ite	eq
 8003b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b88:	2500      	movne	r5, #0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	bfc4      	itt	gt
 8003b8e:	1a9b      	subgt	r3, r3, r2
 8003b90:	18ed      	addgt	r5, r5, r3
 8003b92:	2600      	movs	r6, #0
 8003b94:	341a      	adds	r4, #26
 8003b96:	42b5      	cmp	r5, r6
 8003b98:	d11a      	bne.n	8003bd0 <_printf_common+0xc8>
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	e008      	b.n	8003bb0 <_printf_common+0xa8>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	4652      	mov	r2, sl
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	47c8      	blx	r9
 8003ba8:	3001      	adds	r0, #1
 8003baa:	d103      	bne.n	8003bb4 <_printf_common+0xac>
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb4:	3501      	adds	r5, #1
 8003bb6:	e7c6      	b.n	8003b46 <_printf_common+0x3e>
 8003bb8:	18e1      	adds	r1, r4, r3
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	2030      	movs	r0, #48	@ 0x30
 8003bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bc2:	4422      	add	r2, r4
 8003bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bcc:	3302      	adds	r3, #2
 8003bce:	e7c7      	b.n	8003b60 <_printf_common+0x58>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	47c8      	blx	r9
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d0e6      	beq.n	8003bac <_printf_common+0xa4>
 8003bde:	3601      	adds	r6, #1
 8003be0:	e7d9      	b.n	8003b96 <_printf_common+0x8e>
	...

08003be4 <_printf_i>:
 8003be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	7e0f      	ldrb	r7, [r1, #24]
 8003bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bec:	2f78      	cmp	r7, #120	@ 0x78
 8003bee:	4691      	mov	r9, r2
 8003bf0:	4680      	mov	r8, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	469a      	mov	sl, r3
 8003bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bfa:	d807      	bhi.n	8003c0c <_printf_i+0x28>
 8003bfc:	2f62      	cmp	r7, #98	@ 0x62
 8003bfe:	d80a      	bhi.n	8003c16 <_printf_i+0x32>
 8003c00:	2f00      	cmp	r7, #0
 8003c02:	f000 80d2 	beq.w	8003daa <_printf_i+0x1c6>
 8003c06:	2f58      	cmp	r7, #88	@ 0x58
 8003c08:	f000 80b9 	beq.w	8003d7e <_printf_i+0x19a>
 8003c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c14:	e03a      	b.n	8003c8c <_printf_i+0xa8>
 8003c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c1a:	2b15      	cmp	r3, #21
 8003c1c:	d8f6      	bhi.n	8003c0c <_printf_i+0x28>
 8003c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c24 <_printf_i+0x40>)
 8003c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c24:	08003c7d 	.word	0x08003c7d
 8003c28:	08003c91 	.word	0x08003c91
 8003c2c:	08003c0d 	.word	0x08003c0d
 8003c30:	08003c0d 	.word	0x08003c0d
 8003c34:	08003c0d 	.word	0x08003c0d
 8003c38:	08003c0d 	.word	0x08003c0d
 8003c3c:	08003c91 	.word	0x08003c91
 8003c40:	08003c0d 	.word	0x08003c0d
 8003c44:	08003c0d 	.word	0x08003c0d
 8003c48:	08003c0d 	.word	0x08003c0d
 8003c4c:	08003c0d 	.word	0x08003c0d
 8003c50:	08003d91 	.word	0x08003d91
 8003c54:	08003cbb 	.word	0x08003cbb
 8003c58:	08003d4b 	.word	0x08003d4b
 8003c5c:	08003c0d 	.word	0x08003c0d
 8003c60:	08003c0d 	.word	0x08003c0d
 8003c64:	08003db3 	.word	0x08003db3
 8003c68:	08003c0d 	.word	0x08003c0d
 8003c6c:	08003cbb 	.word	0x08003cbb
 8003c70:	08003c0d 	.word	0x08003c0d
 8003c74:	08003c0d 	.word	0x08003c0d
 8003c78:	08003d53 	.word	0x08003d53
 8003c7c:	6833      	ldr	r3, [r6, #0]
 8003c7e:	1d1a      	adds	r2, r3, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6032      	str	r2, [r6, #0]
 8003c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e09d      	b.n	8003dcc <_printf_i+0x1e8>
 8003c90:	6833      	ldr	r3, [r6, #0]
 8003c92:	6820      	ldr	r0, [r4, #0]
 8003c94:	1d19      	adds	r1, r3, #4
 8003c96:	6031      	str	r1, [r6, #0]
 8003c98:	0606      	lsls	r6, r0, #24
 8003c9a:	d501      	bpl.n	8003ca0 <_printf_i+0xbc>
 8003c9c:	681d      	ldr	r5, [r3, #0]
 8003c9e:	e003      	b.n	8003ca8 <_printf_i+0xc4>
 8003ca0:	0645      	lsls	r5, r0, #25
 8003ca2:	d5fb      	bpl.n	8003c9c <_printf_i+0xb8>
 8003ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	da03      	bge.n	8003cb4 <_printf_i+0xd0>
 8003cac:	232d      	movs	r3, #45	@ 0x2d
 8003cae:	426d      	negs	r5, r5
 8003cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cb4:	4859      	ldr	r0, [pc, #356]	@ (8003e1c <_printf_i+0x238>)
 8003cb6:	230a      	movs	r3, #10
 8003cb8:	e011      	b.n	8003cde <_printf_i+0xfa>
 8003cba:	6821      	ldr	r1, [r4, #0]
 8003cbc:	6833      	ldr	r3, [r6, #0]
 8003cbe:	0608      	lsls	r0, r1, #24
 8003cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cc4:	d402      	bmi.n	8003ccc <_printf_i+0xe8>
 8003cc6:	0649      	lsls	r1, r1, #25
 8003cc8:	bf48      	it	mi
 8003cca:	b2ad      	uxthmi	r5, r5
 8003ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cce:	4853      	ldr	r0, [pc, #332]	@ (8003e1c <_printf_i+0x238>)
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	bf14      	ite	ne
 8003cd4:	230a      	movne	r3, #10
 8003cd6:	2308      	moveq	r3, #8
 8003cd8:	2100      	movs	r1, #0
 8003cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cde:	6866      	ldr	r6, [r4, #4]
 8003ce0:	60a6      	str	r6, [r4, #8]
 8003ce2:	2e00      	cmp	r6, #0
 8003ce4:	bfa2      	ittt	ge
 8003ce6:	6821      	ldrge	r1, [r4, #0]
 8003ce8:	f021 0104 	bicge.w	r1, r1, #4
 8003cec:	6021      	strge	r1, [r4, #0]
 8003cee:	b90d      	cbnz	r5, 8003cf4 <_printf_i+0x110>
 8003cf0:	2e00      	cmp	r6, #0
 8003cf2:	d04b      	beq.n	8003d8c <_printf_i+0x1a8>
 8003cf4:	4616      	mov	r6, r2
 8003cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8003cfe:	5dc7      	ldrb	r7, [r0, r7]
 8003d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d04:	462f      	mov	r7, r5
 8003d06:	42bb      	cmp	r3, r7
 8003d08:	460d      	mov	r5, r1
 8003d0a:	d9f4      	bls.n	8003cf6 <_printf_i+0x112>
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d10b      	bne.n	8003d28 <_printf_i+0x144>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	07df      	lsls	r7, r3, #31
 8003d14:	d508      	bpl.n	8003d28 <_printf_i+0x144>
 8003d16:	6923      	ldr	r3, [r4, #16]
 8003d18:	6861      	ldr	r1, [r4, #4]
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	bfde      	ittt	le
 8003d1e:	2330      	movle	r3, #48	@ 0x30
 8003d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d28:	1b92      	subs	r2, r2, r6
 8003d2a:	6122      	str	r2, [r4, #16]
 8003d2c:	f8cd a000 	str.w	sl, [sp]
 8003d30:	464b      	mov	r3, r9
 8003d32:	aa03      	add	r2, sp, #12
 8003d34:	4621      	mov	r1, r4
 8003d36:	4640      	mov	r0, r8
 8003d38:	f7ff fee6 	bl	8003b08 <_printf_common>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d14a      	bne.n	8003dd6 <_printf_i+0x1f2>
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	b004      	add	sp, #16
 8003d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	f043 0320 	orr.w	r3, r3, #32
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	4833      	ldr	r0, [pc, #204]	@ (8003e20 <_printf_i+0x23c>)
 8003d54:	2778      	movs	r7, #120	@ 0x78
 8003d56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	6831      	ldr	r1, [r6, #0]
 8003d5e:	061f      	lsls	r7, r3, #24
 8003d60:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d64:	d402      	bmi.n	8003d6c <_printf_i+0x188>
 8003d66:	065f      	lsls	r7, r3, #25
 8003d68:	bf48      	it	mi
 8003d6a:	b2ad      	uxthmi	r5, r5
 8003d6c:	6031      	str	r1, [r6, #0]
 8003d6e:	07d9      	lsls	r1, r3, #31
 8003d70:	bf44      	itt	mi
 8003d72:	f043 0320 	orrmi.w	r3, r3, #32
 8003d76:	6023      	strmi	r3, [r4, #0]
 8003d78:	b11d      	cbz	r5, 8003d82 <_printf_i+0x19e>
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	e7ac      	b.n	8003cd8 <_printf_i+0xf4>
 8003d7e:	4827      	ldr	r0, [pc, #156]	@ (8003e1c <_printf_i+0x238>)
 8003d80:	e7e9      	b.n	8003d56 <_printf_i+0x172>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	f023 0320 	bic.w	r3, r3, #32
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	e7f6      	b.n	8003d7a <_printf_i+0x196>
 8003d8c:	4616      	mov	r6, r2
 8003d8e:	e7bd      	b.n	8003d0c <_printf_i+0x128>
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	6825      	ldr	r5, [r4, #0]
 8003d94:	6961      	ldr	r1, [r4, #20]
 8003d96:	1d18      	adds	r0, r3, #4
 8003d98:	6030      	str	r0, [r6, #0]
 8003d9a:	062e      	lsls	r6, r5, #24
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	d501      	bpl.n	8003da4 <_printf_i+0x1c0>
 8003da0:	6019      	str	r1, [r3, #0]
 8003da2:	e002      	b.n	8003daa <_printf_i+0x1c6>
 8003da4:	0668      	lsls	r0, r5, #25
 8003da6:	d5fb      	bpl.n	8003da0 <_printf_i+0x1bc>
 8003da8:	8019      	strh	r1, [r3, #0]
 8003daa:	2300      	movs	r3, #0
 8003dac:	6123      	str	r3, [r4, #16]
 8003dae:	4616      	mov	r6, r2
 8003db0:	e7bc      	b.n	8003d2c <_printf_i+0x148>
 8003db2:	6833      	ldr	r3, [r6, #0]
 8003db4:	1d1a      	adds	r2, r3, #4
 8003db6:	6032      	str	r2, [r6, #0]
 8003db8:	681e      	ldr	r6, [r3, #0]
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	f7fc fa06 	bl	80001d0 <memchr>
 8003dc4:	b108      	cbz	r0, 8003dca <_printf_i+0x1e6>
 8003dc6:	1b80      	subs	r0, r0, r6
 8003dc8:	6060      	str	r0, [r4, #4]
 8003dca:	6863      	ldr	r3, [r4, #4]
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd4:	e7aa      	b.n	8003d2c <_printf_i+0x148>
 8003dd6:	6923      	ldr	r3, [r4, #16]
 8003dd8:	4632      	mov	r2, r6
 8003dda:	4649      	mov	r1, r9
 8003ddc:	4640      	mov	r0, r8
 8003dde:	47d0      	blx	sl
 8003de0:	3001      	adds	r0, #1
 8003de2:	d0ad      	beq.n	8003d40 <_printf_i+0x15c>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	079b      	lsls	r3, r3, #30
 8003de8:	d413      	bmi.n	8003e12 <_printf_i+0x22e>
 8003dea:	68e0      	ldr	r0, [r4, #12]
 8003dec:	9b03      	ldr	r3, [sp, #12]
 8003dee:	4298      	cmp	r0, r3
 8003df0:	bfb8      	it	lt
 8003df2:	4618      	movlt	r0, r3
 8003df4:	e7a6      	b.n	8003d44 <_printf_i+0x160>
 8003df6:	2301      	movs	r3, #1
 8003df8:	4632      	mov	r2, r6
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	4640      	mov	r0, r8
 8003dfe:	47d0      	blx	sl
 8003e00:	3001      	adds	r0, #1
 8003e02:	d09d      	beq.n	8003d40 <_printf_i+0x15c>
 8003e04:	3501      	adds	r5, #1
 8003e06:	68e3      	ldr	r3, [r4, #12]
 8003e08:	9903      	ldr	r1, [sp, #12]
 8003e0a:	1a5b      	subs	r3, r3, r1
 8003e0c:	42ab      	cmp	r3, r5
 8003e0e:	dcf2      	bgt.n	8003df6 <_printf_i+0x212>
 8003e10:	e7eb      	b.n	8003dea <_printf_i+0x206>
 8003e12:	2500      	movs	r5, #0
 8003e14:	f104 0619 	add.w	r6, r4, #25
 8003e18:	e7f5      	b.n	8003e06 <_printf_i+0x222>
 8003e1a:	bf00      	nop
 8003e1c:	08004301 	.word	0x08004301
 8003e20:	08004312 	.word	0x08004312

08003e24 <__sflush_r>:
 8003e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e2c:	0716      	lsls	r6, r2, #28
 8003e2e:	4605      	mov	r5, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	d454      	bmi.n	8003ede <__sflush_r+0xba>
 8003e34:	684b      	ldr	r3, [r1, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	dc02      	bgt.n	8003e40 <__sflush_r+0x1c>
 8003e3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	dd48      	ble.n	8003ed2 <__sflush_r+0xae>
 8003e40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e42:	2e00      	cmp	r6, #0
 8003e44:	d045      	beq.n	8003ed2 <__sflush_r+0xae>
 8003e46:	2300      	movs	r3, #0
 8003e48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e4c:	682f      	ldr	r7, [r5, #0]
 8003e4e:	6a21      	ldr	r1, [r4, #32]
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	d030      	beq.n	8003eb6 <__sflush_r+0x92>
 8003e54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	0759      	lsls	r1, r3, #29
 8003e5a:	d505      	bpl.n	8003e68 <__sflush_r+0x44>
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	1ad2      	subs	r2, r2, r3
 8003e60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e62:	b10b      	cbz	r3, 8003e68 <__sflush_r+0x44>
 8003e64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e66:	1ad2      	subs	r2, r2, r3
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e6c:	6a21      	ldr	r1, [r4, #32]
 8003e6e:	4628      	mov	r0, r5
 8003e70:	47b0      	blx	r6
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	d106      	bne.n	8003e86 <__sflush_r+0x62>
 8003e78:	6829      	ldr	r1, [r5, #0]
 8003e7a:	291d      	cmp	r1, #29
 8003e7c:	d82b      	bhi.n	8003ed6 <__sflush_r+0xb2>
 8003e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f28 <__sflush_r+0x104>)
 8003e80:	410a      	asrs	r2, r1
 8003e82:	07d6      	lsls	r6, r2, #31
 8003e84:	d427      	bmi.n	8003ed6 <__sflush_r+0xb2>
 8003e86:	2200      	movs	r2, #0
 8003e88:	6062      	str	r2, [r4, #4]
 8003e8a:	04d9      	lsls	r1, r3, #19
 8003e8c:	6922      	ldr	r2, [r4, #16]
 8003e8e:	6022      	str	r2, [r4, #0]
 8003e90:	d504      	bpl.n	8003e9c <__sflush_r+0x78>
 8003e92:	1c42      	adds	r2, r0, #1
 8003e94:	d101      	bne.n	8003e9a <__sflush_r+0x76>
 8003e96:	682b      	ldr	r3, [r5, #0]
 8003e98:	b903      	cbnz	r3, 8003e9c <__sflush_r+0x78>
 8003e9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e9e:	602f      	str	r7, [r5, #0]
 8003ea0:	b1b9      	cbz	r1, 8003ed2 <__sflush_r+0xae>
 8003ea2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d002      	beq.n	8003eb0 <__sflush_r+0x8c>
 8003eaa:	4628      	mov	r0, r5
 8003eac:	f7ff fbea 	bl	8003684 <_free_r>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8003eb4:	e00d      	b.n	8003ed2 <__sflush_r+0xae>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4628      	mov	r0, r5
 8003eba:	47b0      	blx	r6
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	1c50      	adds	r0, r2, #1
 8003ec0:	d1c9      	bne.n	8003e56 <__sflush_r+0x32>
 8003ec2:	682b      	ldr	r3, [r5, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0c6      	beq.n	8003e56 <__sflush_r+0x32>
 8003ec8:	2b1d      	cmp	r3, #29
 8003eca:	d001      	beq.n	8003ed0 <__sflush_r+0xac>
 8003ecc:	2b16      	cmp	r3, #22
 8003ece:	d11e      	bne.n	8003f0e <__sflush_r+0xea>
 8003ed0:	602f      	str	r7, [r5, #0]
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	e022      	b.n	8003f1c <__sflush_r+0xf8>
 8003ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eda:	b21b      	sxth	r3, r3
 8003edc:	e01b      	b.n	8003f16 <__sflush_r+0xf2>
 8003ede:	690f      	ldr	r7, [r1, #16]
 8003ee0:	2f00      	cmp	r7, #0
 8003ee2:	d0f6      	beq.n	8003ed2 <__sflush_r+0xae>
 8003ee4:	0793      	lsls	r3, r2, #30
 8003ee6:	680e      	ldr	r6, [r1, #0]
 8003ee8:	bf08      	it	eq
 8003eea:	694b      	ldreq	r3, [r1, #20]
 8003eec:	600f      	str	r7, [r1, #0]
 8003eee:	bf18      	it	ne
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	eba6 0807 	sub.w	r8, r6, r7
 8003ef6:	608b      	str	r3, [r1, #8]
 8003ef8:	f1b8 0f00 	cmp.w	r8, #0
 8003efc:	dde9      	ble.n	8003ed2 <__sflush_r+0xae>
 8003efe:	6a21      	ldr	r1, [r4, #32]
 8003f00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f02:	4643      	mov	r3, r8
 8003f04:	463a      	mov	r2, r7
 8003f06:	4628      	mov	r0, r5
 8003f08:	47b0      	blx	r6
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	dc08      	bgt.n	8003f20 <__sflush_r+0xfc>
 8003f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f20:	4407      	add	r7, r0
 8003f22:	eba8 0800 	sub.w	r8, r8, r0
 8003f26:	e7e7      	b.n	8003ef8 <__sflush_r+0xd4>
 8003f28:	dfbffffe 	.word	0xdfbffffe

08003f2c <_fflush_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	690b      	ldr	r3, [r1, #16]
 8003f30:	4605      	mov	r5, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	b913      	cbnz	r3, 8003f3c <_fflush_r+0x10>
 8003f36:	2500      	movs	r5, #0
 8003f38:	4628      	mov	r0, r5
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	b118      	cbz	r0, 8003f46 <_fflush_r+0x1a>
 8003f3e:	6a03      	ldr	r3, [r0, #32]
 8003f40:	b90b      	cbnz	r3, 8003f46 <_fflush_r+0x1a>
 8003f42:	f7ff f9e3 	bl	800330c <__sinit>
 8003f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f3      	beq.n	8003f36 <_fflush_r+0xa>
 8003f4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f50:	07d0      	lsls	r0, r2, #31
 8003f52:	d404      	bmi.n	8003f5e <_fflush_r+0x32>
 8003f54:	0599      	lsls	r1, r3, #22
 8003f56:	d402      	bmi.n	8003f5e <_fflush_r+0x32>
 8003f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f5a:	f7ff fb90 	bl	800367e <__retarget_lock_acquire_recursive>
 8003f5e:	4628      	mov	r0, r5
 8003f60:	4621      	mov	r1, r4
 8003f62:	f7ff ff5f 	bl	8003e24 <__sflush_r>
 8003f66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f68:	07da      	lsls	r2, r3, #31
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	d4e4      	bmi.n	8003f38 <_fflush_r+0xc>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	059b      	lsls	r3, r3, #22
 8003f72:	d4e1      	bmi.n	8003f38 <_fflush_r+0xc>
 8003f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f76:	f7ff fb83 	bl	8003680 <__retarget_lock_release_recursive>
 8003f7a:	e7dd      	b.n	8003f38 <_fflush_r+0xc>

08003f7c <__swhatbuf_r>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	460c      	mov	r4, r1
 8003f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f84:	2900      	cmp	r1, #0
 8003f86:	b096      	sub	sp, #88	@ 0x58
 8003f88:	4615      	mov	r5, r2
 8003f8a:	461e      	mov	r6, r3
 8003f8c:	da0d      	bge.n	8003faa <__swhatbuf_r+0x2e>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2340      	movne	r3, #64	@ 0x40
 8003f9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	6031      	str	r1, [r6, #0]
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	b016      	add	sp, #88	@ 0x58
 8003fa8:	bd70      	pop	{r4, r5, r6, pc}
 8003faa:	466a      	mov	r2, sp
 8003fac:	f000 f8dc 	bl	8004168 <_fstat_r>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	dbec      	blt.n	8003f8e <__swhatbuf_r+0x12>
 8003fb4:	9901      	ldr	r1, [sp, #4]
 8003fb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003fba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003fbe:	4259      	negs	r1, r3
 8003fc0:	4159      	adcs	r1, r3
 8003fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fc6:	e7eb      	b.n	8003fa0 <__swhatbuf_r+0x24>

08003fc8 <__smakebuf_r>:
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fcc:	079d      	lsls	r5, r3, #30
 8003fce:	4606      	mov	r6, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	d507      	bpl.n	8003fe4 <__smakebuf_r+0x1c>
 8003fd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	6123      	str	r3, [r4, #16]
 8003fdc:	2301      	movs	r3, #1
 8003fde:	6163      	str	r3, [r4, #20]
 8003fe0:	b003      	add	sp, #12
 8003fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe4:	ab01      	add	r3, sp, #4
 8003fe6:	466a      	mov	r2, sp
 8003fe8:	f7ff ffc8 	bl	8003f7c <__swhatbuf_r>
 8003fec:	9f00      	ldr	r7, [sp, #0]
 8003fee:	4605      	mov	r5, r0
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f7ff fbba 	bl	800376c <_malloc_r>
 8003ff8:	b948      	cbnz	r0, 800400e <__smakebuf_r+0x46>
 8003ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffe:	059a      	lsls	r2, r3, #22
 8004000:	d4ee      	bmi.n	8003fe0 <__smakebuf_r+0x18>
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	f043 0302 	orr.w	r3, r3, #2
 800400a:	81a3      	strh	r3, [r4, #12]
 800400c:	e7e2      	b.n	8003fd4 <__smakebuf_r+0xc>
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	6020      	str	r0, [r4, #0]
 8004012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	9b01      	ldr	r3, [sp, #4]
 800401a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800401e:	b15b      	cbz	r3, 8004038 <__smakebuf_r+0x70>
 8004020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004024:	4630      	mov	r0, r6
 8004026:	f000 f8b1 	bl	800418c <_isatty_r>
 800402a:	b128      	cbz	r0, 8004038 <__smakebuf_r+0x70>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	431d      	orrs	r5, r3
 800403c:	81a5      	strh	r5, [r4, #12]
 800403e:	e7cf      	b.n	8003fe0 <__smakebuf_r+0x18>

08004040 <__swbuf_r>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	460e      	mov	r6, r1
 8004044:	4614      	mov	r4, r2
 8004046:	4605      	mov	r5, r0
 8004048:	b118      	cbz	r0, 8004052 <__swbuf_r+0x12>
 800404a:	6a03      	ldr	r3, [r0, #32]
 800404c:	b90b      	cbnz	r3, 8004052 <__swbuf_r+0x12>
 800404e:	f7ff f95d 	bl	800330c <__sinit>
 8004052:	69a3      	ldr	r3, [r4, #24]
 8004054:	60a3      	str	r3, [r4, #8]
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	071a      	lsls	r2, r3, #28
 800405a:	d501      	bpl.n	8004060 <__swbuf_r+0x20>
 800405c:	6923      	ldr	r3, [r4, #16]
 800405e:	b943      	cbnz	r3, 8004072 <__swbuf_r+0x32>
 8004060:	4621      	mov	r1, r4
 8004062:	4628      	mov	r0, r5
 8004064:	f000 f82a 	bl	80040bc <__swsetup_r>
 8004068:	b118      	cbz	r0, 8004072 <__swbuf_r+0x32>
 800406a:	f04f 37ff 	mov.w	r7, #4294967295
 800406e:	4638      	mov	r0, r7
 8004070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	1a98      	subs	r0, r3, r2
 8004078:	6963      	ldr	r3, [r4, #20]
 800407a:	b2f6      	uxtb	r6, r6
 800407c:	4283      	cmp	r3, r0
 800407e:	4637      	mov	r7, r6
 8004080:	dc05      	bgt.n	800408e <__swbuf_r+0x4e>
 8004082:	4621      	mov	r1, r4
 8004084:	4628      	mov	r0, r5
 8004086:	f7ff ff51 	bl	8003f2c <_fflush_r>
 800408a:	2800      	cmp	r0, #0
 800408c:	d1ed      	bne.n	800406a <__swbuf_r+0x2a>
 800408e:	68a3      	ldr	r3, [r4, #8]
 8004090:	3b01      	subs	r3, #1
 8004092:	60a3      	str	r3, [r4, #8]
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	6022      	str	r2, [r4, #0]
 800409a:	701e      	strb	r6, [r3, #0]
 800409c:	6962      	ldr	r2, [r4, #20]
 800409e:	1c43      	adds	r3, r0, #1
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d004      	beq.n	80040ae <__swbuf_r+0x6e>
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	07db      	lsls	r3, r3, #31
 80040a8:	d5e1      	bpl.n	800406e <__swbuf_r+0x2e>
 80040aa:	2e0a      	cmp	r6, #10
 80040ac:	d1df      	bne.n	800406e <__swbuf_r+0x2e>
 80040ae:	4621      	mov	r1, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	f7ff ff3b 	bl	8003f2c <_fflush_r>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d0d9      	beq.n	800406e <__swbuf_r+0x2e>
 80040ba:	e7d6      	b.n	800406a <__swbuf_r+0x2a>

080040bc <__swsetup_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4b29      	ldr	r3, [pc, #164]	@ (8004164 <__swsetup_r+0xa8>)
 80040c0:	4605      	mov	r5, r0
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	460c      	mov	r4, r1
 80040c6:	b118      	cbz	r0, 80040d0 <__swsetup_r+0x14>
 80040c8:	6a03      	ldr	r3, [r0, #32]
 80040ca:	b90b      	cbnz	r3, 80040d0 <__swsetup_r+0x14>
 80040cc:	f7ff f91e 	bl	800330c <__sinit>
 80040d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040d4:	0719      	lsls	r1, r3, #28
 80040d6:	d422      	bmi.n	800411e <__swsetup_r+0x62>
 80040d8:	06da      	lsls	r2, r3, #27
 80040da:	d407      	bmi.n	80040ec <__swsetup_r+0x30>
 80040dc:	2209      	movs	r2, #9
 80040de:	602a      	str	r2, [r5, #0]
 80040e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ea:	e033      	b.n	8004154 <__swsetup_r+0x98>
 80040ec:	0758      	lsls	r0, r3, #29
 80040ee:	d512      	bpl.n	8004116 <__swsetup_r+0x5a>
 80040f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040f2:	b141      	cbz	r1, 8004106 <__swsetup_r+0x4a>
 80040f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040f8:	4299      	cmp	r1, r3
 80040fa:	d002      	beq.n	8004102 <__swsetup_r+0x46>
 80040fc:	4628      	mov	r0, r5
 80040fe:	f7ff fac1 	bl	8003684 <_free_r>
 8004102:	2300      	movs	r3, #0
 8004104:	6363      	str	r3, [r4, #52]	@ 0x34
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800410c:	81a3      	strh	r3, [r4, #12]
 800410e:	2300      	movs	r3, #0
 8004110:	6063      	str	r3, [r4, #4]
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	81a3      	strh	r3, [r4, #12]
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	b94b      	cbnz	r3, 8004136 <__swsetup_r+0x7a>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412c:	d003      	beq.n	8004136 <__swsetup_r+0x7a>
 800412e:	4621      	mov	r1, r4
 8004130:	4628      	mov	r0, r5
 8004132:	f7ff ff49 	bl	8003fc8 <__smakebuf_r>
 8004136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800413a:	f013 0201 	ands.w	r2, r3, #1
 800413e:	d00a      	beq.n	8004156 <__swsetup_r+0x9a>
 8004140:	2200      	movs	r2, #0
 8004142:	60a2      	str	r2, [r4, #8]
 8004144:	6962      	ldr	r2, [r4, #20]
 8004146:	4252      	negs	r2, r2
 8004148:	61a2      	str	r2, [r4, #24]
 800414a:	6922      	ldr	r2, [r4, #16]
 800414c:	b942      	cbnz	r2, 8004160 <__swsetup_r+0xa4>
 800414e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004152:	d1c5      	bne.n	80040e0 <__swsetup_r+0x24>
 8004154:	bd38      	pop	{r3, r4, r5, pc}
 8004156:	0799      	lsls	r1, r3, #30
 8004158:	bf58      	it	pl
 800415a:	6962      	ldrpl	r2, [r4, #20]
 800415c:	60a2      	str	r2, [r4, #8]
 800415e:	e7f4      	b.n	800414a <__swsetup_r+0x8e>
 8004160:	2000      	movs	r0, #0
 8004162:	e7f7      	b.n	8004154 <__swsetup_r+0x98>
 8004164:	20000018 	.word	0x20000018

08004168 <_fstat_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4d07      	ldr	r5, [pc, #28]	@ (8004188 <_fstat_r+0x20>)
 800416c:	2300      	movs	r3, #0
 800416e:	4604      	mov	r4, r0
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	602b      	str	r3, [r5, #0]
 8004176:	f7fc fd87 	bl	8000c88 <_fstat>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	d102      	bne.n	8004184 <_fstat_r+0x1c>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	b103      	cbz	r3, 8004184 <_fstat_r+0x1c>
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	bd38      	pop	{r3, r4, r5, pc}
 8004186:	bf00      	nop
 8004188:	20000268 	.word	0x20000268

0800418c <_isatty_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4d06      	ldr	r5, [pc, #24]	@ (80041a8 <_isatty_r+0x1c>)
 8004190:	2300      	movs	r3, #0
 8004192:	4604      	mov	r4, r0
 8004194:	4608      	mov	r0, r1
 8004196:	602b      	str	r3, [r5, #0]
 8004198:	f7fc fd86 	bl	8000ca8 <_isatty>
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	d102      	bne.n	80041a6 <_isatty_r+0x1a>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	b103      	cbz	r3, 80041a6 <_isatty_r+0x1a>
 80041a4:	6023      	str	r3, [r4, #0]
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
 80041a8:	20000268 	.word	0x20000268

080041ac <_sbrk_r>:
 80041ac:	b538      	push	{r3, r4, r5, lr}
 80041ae:	4d06      	ldr	r5, [pc, #24]	@ (80041c8 <_sbrk_r+0x1c>)
 80041b0:	2300      	movs	r3, #0
 80041b2:	4604      	mov	r4, r0
 80041b4:	4608      	mov	r0, r1
 80041b6:	602b      	str	r3, [r5, #0]
 80041b8:	f7fc fd8e 	bl	8000cd8 <_sbrk>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d102      	bne.n	80041c6 <_sbrk_r+0x1a>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	b103      	cbz	r3, 80041c6 <_sbrk_r+0x1a>
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	20000268 	.word	0x20000268

080041cc <_init>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr

080041d8 <_fini>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr
